# Generated from JavaGrammar.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,131,1650,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,1,0,5,0,252,
        8,0,10,0,12,0,255,9,0,1,1,5,1,258,8,1,10,1,12,1,261,9,1,1,1,1,1,
        3,1,265,8,1,1,2,1,2,1,2,1,2,1,2,3,2,272,8,2,1,3,1,3,1,4,1,4,3,4,
        278,8,4,1,5,1,5,1,5,1,5,3,5,284,8,5,1,5,1,5,3,5,288,8,5,1,5,1,5,
        1,6,1,6,1,6,1,6,5,6,296,8,6,10,6,12,6,299,9,6,1,6,1,6,1,7,5,7,304,
        8,7,10,7,12,7,307,9,7,1,7,1,7,1,7,5,7,312,8,7,10,7,12,7,315,9,7,
        1,7,3,7,318,8,7,1,8,1,8,1,8,5,8,323,8,8,10,8,12,8,326,9,8,1,9,1,
        9,1,9,1,9,3,9,332,8,9,1,9,1,9,3,9,336,8,9,1,9,3,9,339,8,9,1,9,3,
        9,342,8,9,1,9,1,9,1,10,1,10,1,10,5,10,349,8,10,10,10,12,10,352,9,
        10,1,11,5,11,355,8,11,10,11,12,11,358,9,11,1,11,1,11,3,11,362,8,
        11,1,11,3,11,365,8,11,1,12,1,12,5,12,369,8,12,10,12,12,12,372,9,
        12,1,13,1,13,1,13,3,13,377,8,13,1,13,1,13,3,13,381,8,13,1,13,1,13,
        3,13,385,8,13,1,13,1,13,1,14,1,14,5,14,391,8,14,10,14,12,14,394,
        9,14,1,14,1,14,1,15,1,15,5,15,400,8,15,10,15,12,15,403,9,15,1,15,
        1,15,1,16,1,16,3,16,409,8,16,1,17,1,17,1,17,1,17,5,17,415,8,17,10,
        17,12,17,418,9,17,1,17,3,17,421,8,17,1,18,4,18,424,8,18,11,18,12,
        18,425,1,18,1,18,1,18,1,18,1,18,1,19,1,19,5,19,435,8,19,10,19,12,
        19,438,9,19,1,19,1,19,1,20,1,20,1,20,1,20,5,20,446,8,20,10,20,12,
        20,449,9,20,1,20,3,20,452,8,20,1,21,3,21,455,8,21,1,22,1,22,3,22,
        459,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
        1,26,5,26,473,8,26,10,26,12,26,476,9,26,1,26,1,26,1,26,1,27,5,27,
        482,8,27,10,27,12,27,485,9,27,1,27,1,27,1,27,1,27,1,28,5,28,492,
        8,28,10,28,12,28,495,9,28,1,28,1,28,3,28,499,8,28,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,3,29,509,8,29,1,30,1,30,1,30,1,30,5,30,
        515,8,30,10,30,12,30,518,9,30,1,30,1,30,1,31,1,31,1,31,5,31,525,
        8,31,10,31,12,31,528,9,31,1,31,1,31,1,31,1,32,5,32,534,8,32,10,32,
        12,32,537,9,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,547,
        8,33,1,34,5,34,550,8,34,10,34,12,34,553,9,34,1,34,1,34,1,34,1,35,
        5,35,559,8,35,10,35,12,35,562,9,35,1,35,1,35,1,35,1,35,1,35,5,35,
        569,8,35,10,35,12,35,572,9,35,1,35,1,35,3,35,576,8,35,1,35,1,35,
        1,36,1,36,1,36,5,36,583,8,36,10,36,12,36,586,9,36,1,37,1,37,1,37,
        3,37,591,8,37,1,38,1,38,1,38,5,38,596,8,38,10,38,12,38,599,9,38,
        1,39,1,39,3,39,603,8,39,1,40,1,40,1,40,1,40,5,40,609,8,40,10,40,
        12,40,612,9,40,1,40,3,40,615,8,40,3,40,617,8,40,1,40,1,40,1,41,1,
        41,3,41,623,8,41,1,41,1,41,5,41,627,8,41,10,41,12,41,630,9,41,1,
        41,1,41,3,41,634,8,41,1,42,1,42,5,42,638,8,42,10,42,12,42,641,9,
        42,1,42,1,42,1,42,3,42,646,8,42,3,42,648,8,42,1,43,1,43,1,43,5,43,
        653,8,43,10,43,12,43,656,9,43,1,44,1,44,3,44,660,8,44,1,44,1,44,
        1,44,3,44,665,8,44,1,44,3,44,668,8,44,3,44,670,8,44,1,44,1,44,1,
        45,1,45,1,45,1,45,5,45,678,8,45,10,45,12,45,681,9,45,1,45,1,45,1,
        46,1,46,1,46,5,46,688,8,46,10,46,12,46,691,9,46,1,46,1,46,3,46,695,
        8,46,1,46,3,46,698,8,46,1,47,5,47,701,8,47,10,47,12,47,704,9,47,
        1,47,1,47,1,47,1,48,5,48,710,8,48,10,48,12,48,713,9,48,1,48,1,48,
        5,48,717,8,48,10,48,12,48,720,9,48,1,48,1,48,1,48,1,49,1,49,1,49,
        5,49,728,8,49,10,49,12,49,731,9,49,1,50,5,50,734,8,50,10,50,12,50,
        737,9,50,1,50,1,50,1,50,1,51,1,51,1,51,5,51,745,8,51,10,51,12,51,
        748,9,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,757,8,52,1,53,1,
        53,1,54,1,54,1,55,1,55,1,55,5,55,766,8,55,10,55,12,55,769,9,55,1,
        55,1,55,1,55,1,56,1,56,1,56,3,56,777,8,56,1,56,1,56,1,56,3,56,782,
        8,56,1,56,3,56,785,8,56,1,57,1,57,1,57,5,57,790,8,57,10,57,12,57,
        793,9,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,3,59,802,8,59,1,60,1,
        60,1,60,1,60,5,60,808,8,60,10,60,12,60,811,9,60,3,60,813,8,60,1,
        60,3,60,816,8,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,5,
        62,827,8,62,10,62,12,62,830,9,62,1,62,1,62,1,63,5,63,835,8,63,10,
        63,12,63,838,9,63,1,63,1,63,3,63,842,8,63,1,64,1,64,1,64,1,64,1,
        64,1,64,3,64,850,8,64,1,64,1,64,3,64,854,8,64,1,64,1,64,3,64,858,
        8,64,1,64,1,64,3,64,862,8,64,1,64,1,64,3,64,866,8,64,3,64,868,8,
        64,1,65,1,65,3,65,872,8,65,1,66,1,66,1,66,1,66,3,66,878,8,66,1,67,
        1,67,1,68,1,68,1,68,1,69,3,69,886,8,69,1,69,1,69,1,69,1,69,1,70,
        1,70,5,70,894,8,70,10,70,12,70,897,9,70,1,70,1,70,1,71,1,71,5,71,
        903,8,71,10,71,12,71,906,9,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        3,71,915,8,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,923,8,71,1,71,1,
        71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,937,8,
        71,1,72,1,72,1,73,1,73,1,73,3,73,944,8,73,1,73,1,73,1,73,3,73,949,
        8,73,1,73,1,73,1,74,1,74,3,74,955,8,74,1,74,1,74,1,75,1,75,1,75,
        5,75,962,8,75,10,75,12,75,965,9,75,1,76,1,76,1,76,1,77,1,77,1,77,
        5,77,973,8,77,10,77,12,77,976,9,77,1,77,1,77,1,78,1,78,5,78,982,
        8,78,10,78,12,78,985,9,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,3,79,
        994,8,79,1,80,1,80,1,80,1,81,1,81,1,82,1,82,1,83,5,83,1004,8,83,
        10,83,12,83,1007,9,83,1,83,1,83,1,83,3,83,1012,8,83,1,84,1,84,1,
        84,1,84,1,84,3,84,1019,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,
        84,1028,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
        84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,4,84,1049,8,84,11,84,
        12,84,1050,1,84,3,84,1054,8,84,1,84,3,84,1057,8,84,1,84,1,84,1,84,
        1,84,5,84,1063,8,84,10,84,12,84,1066,9,84,1,84,3,84,1069,8,84,1,
        84,1,84,1,84,1,84,5,84,1075,8,84,10,84,12,84,1078,9,84,1,84,5,84,
        1081,8,84,10,84,12,84,1084,9,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
        84,1,84,3,84,1094,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1103,
        8,84,1,84,1,84,1,84,3,84,1108,8,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,3,84,1121,8,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,3,84,1132,8,84,1,85,1,85,1,85,5,85,1137,8,85,
        10,85,12,85,1140,9,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,5,
        86,1150,8,86,10,86,12,86,1153,9,86,1,87,1,87,1,87,1,88,1,88,1,88,
        3,88,1161,8,88,1,88,1,88,1,89,1,89,1,89,5,89,1168,8,89,10,89,12,
        89,1171,9,89,1,90,5,90,1174,8,90,10,90,12,90,1177,9,90,1,90,1,90,
        1,90,1,90,1,90,3,90,1184,8,90,1,90,1,90,1,90,1,90,3,90,1190,8,90,
        1,91,4,91,1193,8,91,11,91,12,91,1194,1,91,4,91,1198,8,91,11,91,12,
        91,1199,1,92,1,92,1,92,1,92,1,92,1,92,3,92,1208,8,92,1,92,1,92,1,
        92,3,92,1213,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1223,
        8,93,1,94,5,94,1226,8,94,10,94,12,94,1229,9,94,1,94,1,94,3,94,1233,
        8,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,96,1,96,1,96,5,96,
        1246,8,96,10,96,12,96,1249,9,96,1,97,1,97,1,97,1,98,1,98,1,98,1,
        98,1,98,1,98,3,98,1260,8,98,1,98,1,98,3,98,1264,8,98,1,98,1,98,1,
        98,3,98,1269,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,5,98,1278,8,
        98,10,98,12,98,1281,9,98,1,98,1,98,1,98,5,98,1286,8,98,10,98,12,
        98,1289,9,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1297,8,98,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,
        98,1313,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1358,8,98,1,98,1,98,1,98,1,
        98,3,98,1364,8,98,1,98,1,98,1,98,3,98,1369,8,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,3,98,1378,8,98,5,98,1380,8,98,10,98,12,98,1383,
        9,98,1,99,5,99,1386,8,99,10,99,12,99,1389,9,99,1,99,1,99,5,99,1393,
        8,99,10,99,12,99,1396,9,99,1,99,1,99,1,100,1,100,1,100,1,100,1,101,
        1,101,1,101,3,101,1407,8,101,1,101,1,101,1,101,1,101,1,101,5,101,
        1414,8,101,10,101,12,101,1417,9,101,1,101,1,101,1,101,1,101,3,101,
        1423,8,101,1,101,3,101,1426,8,101,1,102,1,102,3,102,1430,8,102,1,
        103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,3,103,1448,8,103,3,103,1450,8,103,
        1,104,1,104,1,104,1,104,5,104,1456,8,104,10,104,12,104,1459,9,104,
        1,104,1,104,1,105,1,105,1,105,1,105,3,105,1467,8,105,1,105,1,105,
        1,105,1,105,1,105,3,105,1474,8,105,1,106,1,106,1,106,1,106,1,106,
        1,106,5,106,1482,8,106,10,106,12,106,1485,9,106,1,106,1,106,5,106,
        1489,8,106,10,106,12,106,1492,9,106,1,106,1,106,1,106,5,106,1497,
        8,106,10,106,12,106,1500,9,106,3,106,1502,8,106,1,106,1,106,1,106,
        5,106,1507,8,106,10,106,12,106,1510,9,106,1,107,1,107,5,107,1514,
        8,107,10,107,12,107,1517,9,107,3,107,1519,8,107,1,108,1,108,1,108,
        3,108,1524,8,108,1,108,5,108,1527,8,108,10,108,12,108,1530,9,108,
        1,108,1,108,3,108,1534,8,108,1,109,1,109,1,109,1,110,1,110,3,110,
        1541,8,110,1,111,1,111,3,111,1545,8,111,1,111,1,111,1,112,1,112,
        4,112,1551,8,112,11,112,12,112,1552,1,112,1,112,1,112,1,112,1,112,
        4,112,1560,8,112,11,112,12,112,1561,1,112,1,112,5,112,1566,8,112,
        10,112,12,112,1569,9,112,3,112,1571,8,112,1,113,1,113,3,113,1575,
        8,113,1,114,1,114,1,114,1,115,1,115,1,115,3,115,1583,8,115,1,116,
        1,116,1,116,3,116,1588,8,116,1,117,1,117,1,117,1,117,1,118,1,118,
        1,118,5,118,1597,8,118,10,118,12,118,1600,9,118,1,119,1,119,3,119,
        1604,8,119,1,119,1,119,5,119,1608,8,119,10,119,12,119,1611,9,119,
        1,120,1,120,1,121,1,121,1,121,1,121,5,121,1619,8,121,10,121,12,121,
        1622,9,121,1,121,1,121,1,122,1,122,1,122,3,122,1629,8,122,1,122,
        1,122,3,122,1633,8,122,3,122,1635,8,122,1,123,1,123,1,123,1,123,
        1,123,3,123,1642,8,123,1,124,1,124,3,124,1646,8,124,1,124,1,124,
        1,124,0,2,196,212,125,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
        32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
        76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
        242,244,246,248,0,16,4,0,3,3,20,20,35,37,40,40,2,0,19,19,42,42,1,
        0,70,73,1,0,74,75,2,0,40,40,62,62,3,0,53,62,64,68,131,131,3,0,53,
        62,66,68,131,131,2,0,93,94,103,106,2,0,107,108,112,112,1,0,105,106,
        2,0,91,92,98,99,2,0,97,97,100,100,2,0,90,90,113,123,1,0,103,104,
        2,0,96,96,124,124,8,0,5,5,7,7,10,10,16,16,22,22,29,29,31,31,39,39,
        1805,0,253,1,0,0,0,2,259,1,0,0,0,4,271,1,0,0,0,6,273,1,0,0,0,8,277,
        1,0,0,0,10,279,1,0,0,0,12,291,1,0,0,0,14,305,1,0,0,0,16,319,1,0,
        0,0,18,327,1,0,0,0,20,345,1,0,0,0,22,356,1,0,0,0,24,366,1,0,0,0,
        26,373,1,0,0,0,28,388,1,0,0,0,30,397,1,0,0,0,32,408,1,0,0,0,34,420,
        1,0,0,0,36,423,1,0,0,0,38,432,1,0,0,0,40,441,1,0,0,0,42,454,1,0,
        0,0,44,458,1,0,0,0,46,460,1,0,0,0,48,463,1,0,0,0,50,466,1,0,0,0,
        52,474,1,0,0,0,54,483,1,0,0,0,56,498,1,0,0,0,58,508,1,0,0,0,60,510,
        1,0,0,0,62,521,1,0,0,0,64,535,1,0,0,0,66,546,1,0,0,0,68,551,1,0,
        0,0,70,560,1,0,0,0,72,579,1,0,0,0,74,587,1,0,0,0,76,592,1,0,0,0,
        78,602,1,0,0,0,80,604,1,0,0,0,82,628,1,0,0,0,84,647,1,0,0,0,86,649,
        1,0,0,0,88,657,1,0,0,0,90,673,1,0,0,0,92,697,1,0,0,0,94,702,1,0,
        0,0,96,711,1,0,0,0,98,724,1,0,0,0,100,735,1,0,0,0,102,741,1,0,0,
        0,104,756,1,0,0,0,106,758,1,0,0,0,108,760,1,0,0,0,110,767,1,0,0,
        0,112,776,1,0,0,0,114,786,1,0,0,0,116,794,1,0,0,0,118,801,1,0,0,
        0,120,803,1,0,0,0,122,819,1,0,0,0,124,824,1,0,0,0,126,841,1,0,0,
        0,128,867,1,0,0,0,130,871,1,0,0,0,132,873,1,0,0,0,134,879,1,0,0,
        0,136,881,1,0,0,0,138,885,1,0,0,0,140,891,1,0,0,0,142,936,1,0,0,
        0,144,938,1,0,0,0,146,940,1,0,0,0,148,952,1,0,0,0,150,958,1,0,0,
        0,152,966,1,0,0,0,154,969,1,0,0,0,156,979,1,0,0,0,158,993,1,0,0,
        0,160,995,1,0,0,0,162,998,1,0,0,0,164,1000,1,0,0,0,166,1005,1,0,
        0,0,168,1131,1,0,0,0,170,1133,1,0,0,0,172,1146,1,0,0,0,174,1154,
        1,0,0,0,176,1157,1,0,0,0,178,1164,1,0,0,0,180,1189,1,0,0,0,182,1192,
        1,0,0,0,184,1212,1,0,0,0,186,1222,1,0,0,0,188,1227,1,0,0,0,190,1238,
        1,0,0,0,192,1242,1,0,0,0,194,1250,1,0,0,0,196,1296,1,0,0,0,198,1387,
        1,0,0,0,200,1399,1,0,0,0,202,1425,1,0,0,0,204,1429,1,0,0,0,206,1449,
        1,0,0,0,208,1451,1,0,0,0,210,1473,1,0,0,0,212,1501,1,0,0,0,214,1518,
        1,0,0,0,216,1523,1,0,0,0,218,1535,1,0,0,0,220,1540,1,0,0,0,222,1542,
        1,0,0,0,224,1570,1,0,0,0,226,1572,1,0,0,0,228,1576,1,0,0,0,230,1582,
        1,0,0,0,232,1587,1,0,0,0,234,1589,1,0,0,0,236,1593,1,0,0,0,238,1603,
        1,0,0,0,240,1612,1,0,0,0,242,1614,1,0,0,0,244,1634,1,0,0,0,246,1641,
        1,0,0,0,248,1643,1,0,0,0,250,252,3,2,1,0,251,250,1,0,0,0,252,255,
        1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,1,1,0,0,0,255,253,1,
        0,0,0,256,258,3,6,3,0,257,256,1,0,0,0,258,261,1,0,0,0,259,257,1,
        0,0,0,259,260,1,0,0,0,260,264,1,0,0,0,261,259,1,0,0,0,262,265,3,
        10,5,0,263,265,3,26,13,0,264,262,1,0,0,0,264,263,1,0,0,0,265,3,1,
        0,0,0,266,272,3,6,3,0,267,272,5,32,0,0,268,272,5,44,0,0,269,272,
        5,48,0,0,270,272,5,51,0,0,271,266,1,0,0,0,271,267,1,0,0,0,271,268,
        1,0,0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,5,1,0,0,0,273,274,7,
        0,0,0,274,7,1,0,0,0,275,278,5,20,0,0,276,278,3,112,56,0,277,275,
        1,0,0,0,277,276,1,0,0,0,278,9,1,0,0,0,279,280,5,11,0,0,280,283,3,
        162,81,0,281,282,5,19,0,0,282,284,3,238,119,0,283,281,1,0,0,0,283,
        284,1,0,0,0,284,287,1,0,0,0,285,286,5,26,0,0,286,288,3,236,118,0,
        287,285,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,290,3,28,14,
        0,290,11,1,0,0,0,291,292,5,92,0,0,292,297,3,14,7,0,293,294,5,88,
        0,0,294,296,3,14,7,0,295,293,1,0,0,0,296,299,1,0,0,0,297,295,1,0,
        0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,301,5,91,
        0,0,301,13,1,0,0,0,302,304,3,112,56,0,303,302,1,0,0,0,304,307,1,
        0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,305,1,
        0,0,0,308,317,3,162,81,0,309,313,5,19,0,0,310,312,3,112,56,0,311,
        310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,
        316,1,0,0,0,315,313,1,0,0,0,316,318,3,16,8,0,317,309,1,0,0,0,317,
        318,1,0,0,0,318,15,1,0,0,0,319,324,3,238,119,0,320,321,5,109,0,0,
        321,323,3,238,119,0,322,320,1,0,0,0,323,326,1,0,0,0,324,322,1,0,
        0,0,324,325,1,0,0,0,325,17,1,0,0,0,326,324,1,0,0,0,327,328,5,18,
        0,0,328,331,3,162,81,0,329,330,5,26,0,0,330,332,3,236,118,0,331,
        329,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,335,5,83,0,0,334,
        336,3,20,10,0,335,334,1,0,0,0,335,336,1,0,0,0,336,338,1,0,0,0,337,
        339,5,88,0,0,338,337,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,
        342,3,24,12,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,
        344,5,84,0,0,344,19,1,0,0,0,345,350,3,22,11,0,346,347,5,88,0,0,347,
        349,3,22,11,0,348,346,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,
        351,1,0,0,0,351,21,1,0,0,0,352,350,1,0,0,0,353,355,3,112,56,0,354,
        353,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,
        359,1,0,0,0,358,356,1,0,0,0,359,361,3,162,81,0,360,362,3,248,124,
        0,361,360,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,365,3,28,14,
        0,364,363,1,0,0,0,364,365,1,0,0,0,365,23,1,0,0,0,366,370,5,87,0,
        0,367,369,3,32,16,0,368,367,1,0,0,0,369,372,1,0,0,0,370,368,1,0,
        0,0,370,371,1,0,0,0,371,25,1,0,0,0,372,370,1,0,0,0,373,374,5,30,
        0,0,374,376,3,162,81,0,375,377,3,12,6,0,376,375,1,0,0,0,376,377,
        1,0,0,0,377,380,1,0,0,0,378,379,5,19,0,0,379,381,3,236,118,0,380,
        378,1,0,0,0,380,381,1,0,0,0,381,384,1,0,0,0,382,383,5,68,0,0,383,
        385,3,236,118,0,384,382,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,
        386,387,3,30,15,0,387,27,1,0,0,0,388,392,5,83,0,0,389,391,3,32,16,
        0,390,389,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,
        0,393,395,1,0,0,0,394,392,1,0,0,0,395,396,5,84,0,0,396,29,1,0,0,
        0,397,401,5,83,0,0,398,400,3,56,28,0,399,398,1,0,0,0,400,403,1,0,
        0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,401,1,0,
        0,0,404,405,5,84,0,0,405,31,1,0,0,0,406,409,5,87,0,0,407,409,3,34,
        17,0,408,406,1,0,0,0,408,407,1,0,0,0,409,33,1,0,0,0,410,421,3,36,
        18,0,411,421,3,54,27,0,412,421,3,50,25,0,413,415,3,6,3,0,414,413,
        1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,419,
        1,0,0,0,418,416,1,0,0,0,419,421,3,10,5,0,420,410,1,0,0,0,420,411,
        1,0,0,0,420,412,1,0,0,0,420,416,1,0,0,0,421,35,1,0,0,0,422,424,3,
        6,3,0,423,422,1,0,0,0,424,425,1,0,0,0,425,423,1,0,0,0,425,426,1,
        0,0,0,426,427,1,0,0,0,427,428,3,44,22,0,428,429,3,162,81,0,429,430,
        3,38,19,0,430,431,3,42,21,0,431,37,1,0,0,0,432,436,5,81,0,0,433,
        435,3,40,20,0,434,433,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,
        437,1,0,0,0,437,439,1,0,0,0,438,436,1,0,0,0,439,440,5,82,0,0,440,
        39,1,0,0,0,441,442,3,238,119,0,442,447,3,162,81,0,443,444,5,85,0,
        0,444,446,5,86,0,0,445,443,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,
        0,447,448,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,450,452,5,88,0,
        0,451,450,1,0,0,0,451,452,1,0,0,0,452,41,1,0,0,0,453,455,3,156,78,
        0,454,453,1,0,0,0,454,455,1,0,0,0,455,43,1,0,0,0,456,459,3,238,119,
        0,457,459,5,50,0,0,458,456,1,0,0,0,458,457,1,0,0,0,459,45,1,0,0,
        0,460,461,3,12,6,0,461,462,3,36,18,0,462,47,1,0,0,0,463,464,3,12,
        6,0,464,465,3,50,25,0,465,49,1,0,0,0,466,467,5,37,0,0,467,468,3,
        162,81,0,468,469,3,38,19,0,469,470,3,156,78,0,470,51,1,0,0,0,471,
        473,3,4,2,0,472,471,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,
        475,1,0,0,0,475,477,1,0,0,0,476,474,1,0,0,0,477,478,3,162,81,0,478,
        479,3,156,78,0,479,53,1,0,0,0,480,482,3,6,3,0,481,480,1,0,0,0,482,
        485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,
        483,1,0,0,0,486,487,3,238,119,0,487,488,3,72,36,0,488,489,5,87,0,
        0,489,55,1,0,0,0,490,492,3,4,2,0,491,490,1,0,0,0,492,495,1,0,0,0,
        493,491,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,493,1,0,0,0,
        496,499,3,58,29,0,497,499,5,87,0,0,498,493,1,0,0,0,498,497,1,0,0,
        0,499,57,1,0,0,0,500,509,3,146,73,0,501,509,3,60,30,0,502,509,3,
        64,32,0,503,509,3,68,34,0,504,509,3,26,13,0,505,509,3,122,61,0,506,
        509,3,10,5,0,507,509,3,18,9,0,508,500,1,0,0,0,508,501,1,0,0,0,508,
        502,1,0,0,0,508,503,1,0,0,0,508,504,1,0,0,0,508,505,1,0,0,0,508,
        506,1,0,0,0,508,507,1,0,0,0,509,59,1,0,0,0,510,511,3,238,119,0,511,
        516,3,62,31,0,512,513,5,88,0,0,513,515,3,62,31,0,514,512,1,0,0,0,
        515,518,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,
        518,516,1,0,0,0,519,520,5,87,0,0,520,61,1,0,0,0,521,526,3,162,81,
        0,522,523,5,85,0,0,523,525,5,86,0,0,524,522,1,0,0,0,525,528,1,0,
        0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,526,1,0,
        0,0,529,530,5,90,0,0,530,531,3,78,39,0,531,63,1,0,0,0,532,534,3,
        66,33,0,533,532,1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,536,
        1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,539,3,70,35,0,539,65,
        1,0,0,0,540,547,3,112,56,0,541,547,5,37,0,0,542,547,5,3,0,0,543,
        547,5,14,0,0,544,547,5,40,0,0,545,547,5,41,0,0,546,540,1,0,0,0,546,
        541,1,0,0,0,546,542,1,0,0,0,546,543,1,0,0,0,546,544,1,0,0,0,546,
        545,1,0,0,0,547,67,1,0,0,0,548,550,3,66,33,0,549,548,1,0,0,0,550,
        553,1,0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,554,1,0,0,0,553,
        551,1,0,0,0,554,555,3,12,6,0,555,556,3,70,35,0,556,69,1,0,0,0,557,
        559,3,112,56,0,558,557,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,
        561,1,0,0,0,561,563,1,0,0,0,562,560,1,0,0,0,563,564,3,44,22,0,564,
        565,3,162,81,0,565,570,3,88,44,0,566,567,5,85,0,0,567,569,5,86,0,
        0,568,566,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,
        0,571,575,1,0,0,0,572,570,1,0,0,0,573,574,5,47,0,0,574,576,3,86,
        43,0,575,573,1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,0,577,578,3,42,
        21,0,578,71,1,0,0,0,579,584,3,74,37,0,580,581,5,88,0,0,581,583,3,
        74,37,0,582,580,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,
        1,0,0,0,585,73,1,0,0,0,586,584,1,0,0,0,587,590,3,76,38,0,588,589,
        5,90,0,0,589,591,3,78,39,0,590,588,1,0,0,0,590,591,1,0,0,0,591,75,
        1,0,0,0,592,597,3,162,81,0,593,594,5,85,0,0,594,596,5,86,0,0,595,
        593,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,
        77,1,0,0,0,599,597,1,0,0,0,600,603,3,80,40,0,601,603,3,196,98,0,
        602,600,1,0,0,0,602,601,1,0,0,0,603,79,1,0,0,0,604,616,5,83,0,0,
        605,610,3,78,39,0,606,607,5,88,0,0,607,609,3,78,39,0,608,606,1,0,
        0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,614,1,0,
        0,0,612,610,1,0,0,0,613,615,5,88,0,0,614,613,1,0,0,0,614,615,1,0,
        0,0,615,617,1,0,0,0,616,605,1,0,0,0,616,617,1,0,0,0,617,618,1,0,
        0,0,618,619,5,84,0,0,619,81,1,0,0,0,620,622,3,162,81,0,621,623,3,
        242,121,0,622,621,1,0,0,0,622,623,1,0,0,0,623,624,1,0,0,0,624,625,
        5,89,0,0,625,627,1,0,0,0,626,620,1,0,0,0,627,630,1,0,0,0,628,626,
        1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,0,630,628,1,0,0,0,631,633,
        3,164,82,0,632,634,3,242,121,0,633,632,1,0,0,0,633,634,1,0,0,0,634,
        83,1,0,0,0,635,648,3,238,119,0,636,638,3,112,56,0,637,636,1,0,0,
        0,638,641,1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,
        0,641,639,1,0,0,0,642,645,5,95,0,0,643,644,7,1,0,0,644,646,3,238,
        119,0,645,643,1,0,0,0,645,646,1,0,0,0,646,648,1,0,0,0,647,635,1,
        0,0,0,647,639,1,0,0,0,648,85,1,0,0,0,649,654,3,102,51,0,650,651,
        5,88,0,0,651,653,3,102,51,0,652,650,1,0,0,0,653,656,1,0,0,0,654,
        652,1,0,0,0,654,655,1,0,0,0,655,87,1,0,0,0,656,654,1,0,0,0,657,669,
        5,81,0,0,658,660,3,90,45,0,659,658,1,0,0,0,659,660,1,0,0,0,660,670,
        1,0,0,0,661,664,3,90,45,0,662,663,5,88,0,0,663,665,3,92,46,0,664,
        662,1,0,0,0,664,665,1,0,0,0,665,670,1,0,0,0,666,668,3,92,46,0,667,
        666,1,0,0,0,667,668,1,0,0,0,668,670,1,0,0,0,669,659,1,0,0,0,669,
        661,1,0,0,0,669,667,1,0,0,0,670,671,1,0,0,0,671,672,5,82,0,0,672,
        89,1,0,0,0,673,679,3,238,119,0,674,675,3,162,81,0,675,676,5,89,0,
        0,676,678,1,0,0,0,677,674,1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,
        0,679,680,1,0,0,0,680,682,1,0,0,0,681,679,1,0,0,0,682,683,5,45,0,
        0,683,91,1,0,0,0,684,689,3,94,47,0,685,686,5,88,0,0,686,688,3,94,
        47,0,687,685,1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,
        0,0,690,694,1,0,0,0,691,689,1,0,0,0,692,693,5,88,0,0,693,695,3,96,
        48,0,694,692,1,0,0,0,694,695,1,0,0,0,695,698,1,0,0,0,696,698,3,96,
        48,0,697,684,1,0,0,0,697,696,1,0,0,0,698,93,1,0,0,0,699,701,3,8,
        4,0,700,699,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,
        0,0,703,705,1,0,0,0,704,702,1,0,0,0,705,706,3,238,119,0,706,707,
        3,76,38,0,707,95,1,0,0,0,708,710,3,8,4,0,709,708,1,0,0,0,710,713,
        1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,714,1,0,0,0,713,711,
        1,0,0,0,714,718,3,238,119,0,715,717,3,112,56,0,716,715,1,0,0,0,717,
        720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,721,1,0,0,0,720,
        718,1,0,0,0,721,722,5,127,0,0,722,723,3,76,38,0,723,97,1,0,0,0,724,
        729,3,100,50,0,725,726,5,88,0,0,726,728,3,100,50,0,727,725,1,0,0,
        0,728,731,1,0,0,0,729,727,1,0,0,0,729,730,1,0,0,0,730,99,1,0,0,0,
        731,729,1,0,0,0,732,734,3,8,4,0,733,732,1,0,0,0,734,737,1,0,0,0,
        735,733,1,0,0,0,735,736,1,0,0,0,736,738,1,0,0,0,737,735,1,0,0,0,
        738,739,5,64,0,0,739,740,3,162,81,0,740,101,1,0,0,0,741,746,3,162,
        81,0,742,743,5,89,0,0,743,745,3,162,81,0,744,742,1,0,0,0,745,748,
        1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,103,1,0,0,0,748,746,
        1,0,0,0,749,757,3,106,53,0,750,757,3,108,54,0,751,757,5,77,0,0,752,
        757,5,78,0,0,753,757,5,76,0,0,754,757,5,80,0,0,755,757,5,79,0,0,
        756,749,1,0,0,0,756,750,1,0,0,0,756,751,1,0,0,0,756,752,1,0,0,0,
        756,753,1,0,0,0,756,754,1,0,0,0,756,755,1,0,0,0,757,105,1,0,0,0,
        758,759,7,2,0,0,759,107,1,0,0,0,760,761,7,3,0,0,761,109,1,0,0,0,
        762,763,3,162,81,0,763,764,5,89,0,0,764,766,1,0,0,0,765,762,1,0,
        0,0,766,769,1,0,0,0,767,765,1,0,0,0,767,768,1,0,0,0,768,770,1,0,
        0,0,769,767,1,0,0,0,770,771,5,126,0,0,771,772,3,162,81,0,772,111,
        1,0,0,0,773,774,5,126,0,0,774,777,3,102,51,0,775,777,3,110,55,0,
        776,773,1,0,0,0,776,775,1,0,0,0,777,784,1,0,0,0,778,781,5,81,0,0,
        779,782,3,114,57,0,780,782,3,118,59,0,781,779,1,0,0,0,781,780,1,
        0,0,0,781,782,1,0,0,0,782,783,1,0,0,0,783,785,5,82,0,0,784,778,1,
        0,0,0,784,785,1,0,0,0,785,113,1,0,0,0,786,791,3,116,58,0,787,788,
        5,88,0,0,788,790,3,116,58,0,789,787,1,0,0,0,790,793,1,0,0,0,791,
        789,1,0,0,0,791,792,1,0,0,0,792,115,1,0,0,0,793,791,1,0,0,0,794,
        795,3,162,81,0,795,796,5,90,0,0,796,797,3,118,59,0,797,117,1,0,0,
        0,798,802,3,196,98,0,799,802,3,112,56,0,800,802,3,120,60,0,801,798,
        1,0,0,0,801,799,1,0,0,0,801,800,1,0,0,0,802,119,1,0,0,0,803,812,
        5,83,0,0,804,809,3,118,59,0,805,806,5,88,0,0,806,808,3,118,59,0,
        807,805,1,0,0,0,808,811,1,0,0,0,809,807,1,0,0,0,809,810,1,0,0,0,
        810,813,1,0,0,0,811,809,1,0,0,0,812,804,1,0,0,0,812,813,1,0,0,0,
        813,815,1,0,0,0,814,816,5,88,0,0,815,814,1,0,0,0,815,816,1,0,0,0,
        816,817,1,0,0,0,817,818,5,84,0,0,818,121,1,0,0,0,819,820,5,126,0,
        0,820,821,5,30,0,0,821,822,3,162,81,0,822,823,3,124,62,0,823,123,
        1,0,0,0,824,828,5,83,0,0,825,827,3,126,63,0,826,825,1,0,0,0,827,
        830,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,831,1,0,0,0,830,
        828,1,0,0,0,831,832,5,84,0,0,832,125,1,0,0,0,833,835,3,4,2,0,834,
        833,1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,
        839,1,0,0,0,838,836,1,0,0,0,839,842,3,128,64,0,840,842,5,87,0,0,
        841,836,1,0,0,0,841,840,1,0,0,0,842,127,1,0,0,0,843,844,3,238,119,
        0,844,845,3,130,65,0,845,846,5,87,0,0,846,868,1,0,0,0,847,849,3,
        10,5,0,848,850,5,87,0,0,849,848,1,0,0,0,849,850,1,0,0,0,850,868,
        1,0,0,0,851,853,3,26,13,0,852,854,5,87,0,0,853,852,1,0,0,0,853,854,
        1,0,0,0,854,868,1,0,0,0,855,857,3,18,9,0,856,858,5,87,0,0,857,856,
        1,0,0,0,857,858,1,0,0,0,858,868,1,0,0,0,859,861,3,122,61,0,860,862,
        5,87,0,0,861,860,1,0,0,0,861,862,1,0,0,0,862,868,1,0,0,0,863,865,
        3,146,73,0,864,866,5,87,0,0,865,864,1,0,0,0,865,866,1,0,0,0,866,
        868,1,0,0,0,867,843,1,0,0,0,867,847,1,0,0,0,867,851,1,0,0,0,867,
        855,1,0,0,0,867,859,1,0,0,0,867,863,1,0,0,0,868,129,1,0,0,0,869,
        872,3,132,66,0,870,872,3,134,67,0,871,869,1,0,0,0,871,870,1,0,0,
        0,872,131,1,0,0,0,873,874,3,162,81,0,874,875,5,81,0,0,875,877,5,
        82,0,0,876,878,3,136,68,0,877,876,1,0,0,0,877,878,1,0,0,0,878,133,
        1,0,0,0,879,880,3,72,36,0,880,135,1,0,0,0,881,882,5,14,0,0,882,883,
        3,118,59,0,883,137,1,0,0,0,884,886,5,54,0,0,885,884,1,0,0,0,885,
        886,1,0,0,0,886,887,1,0,0,0,887,888,5,53,0,0,888,889,3,102,51,0,
        889,890,3,140,70,0,890,139,1,0,0,0,891,895,5,83,0,0,892,894,3,142,
        71,0,893,892,1,0,0,0,894,897,1,0,0,0,895,893,1,0,0,0,895,896,1,0,
        0,0,896,898,1,0,0,0,897,895,1,0,0,0,898,899,5,84,0,0,899,141,1,0,
        0,0,900,904,5,55,0,0,901,903,3,144,72,0,902,901,1,0,0,0,903,906,
        1,0,0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,904,
        1,0,0,0,907,908,3,102,51,0,908,909,5,87,0,0,909,937,1,0,0,0,910,
        911,5,56,0,0,911,914,3,102,51,0,912,913,5,58,0,0,913,915,3,102,51,
        0,914,912,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,917,5,87,0,
        0,917,937,1,0,0,0,918,919,5,57,0,0,919,922,3,102,51,0,920,921,5,
        58,0,0,921,923,3,102,51,0,922,920,1,0,0,0,922,923,1,0,0,0,923,924,
        1,0,0,0,924,925,5,87,0,0,925,937,1,0,0,0,926,927,5,59,0,0,927,928,
        3,102,51,0,928,929,5,87,0,0,929,937,1,0,0,0,930,931,5,60,0,0,931,
        932,3,102,51,0,932,933,5,61,0,0,933,934,3,102,51,0,934,935,5,87,
        0,0,935,937,1,0,0,0,936,900,1,0,0,0,936,910,1,0,0,0,936,918,1,0,
        0,0,936,926,1,0,0,0,936,930,1,0,0,0,937,143,1,0,0,0,938,939,7,4,
        0,0,939,145,1,0,0,0,940,941,5,66,0,0,941,943,3,162,81,0,942,944,
        3,12,6,0,943,942,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,948,
        3,148,74,0,946,947,5,26,0,0,947,949,3,236,118,0,948,946,1,0,0,0,
        948,949,1,0,0,0,949,950,1,0,0,0,950,951,3,154,77,0,951,147,1,0,0,
        0,952,954,5,81,0,0,953,955,3,150,75,0,954,953,1,0,0,0,954,955,1,
        0,0,0,955,956,1,0,0,0,956,957,5,82,0,0,957,149,1,0,0,0,958,963,3,
        152,76,0,959,960,5,88,0,0,960,962,3,152,76,0,961,959,1,0,0,0,962,
        965,1,0,0,0,963,961,1,0,0,0,963,964,1,0,0,0,964,151,1,0,0,0,965,
        963,1,0,0,0,966,967,3,238,119,0,967,968,3,162,81,0,968,153,1,0,0,
        0,969,974,5,83,0,0,970,973,3,32,16,0,971,973,3,52,26,0,972,970,1,
        0,0,0,972,971,1,0,0,0,973,976,1,0,0,0,974,972,1,0,0,0,974,975,1,
        0,0,0,975,977,1,0,0,0,976,974,1,0,0,0,977,978,5,84,0,0,978,155,1,
        0,0,0,979,983,5,83,0,0,980,982,3,158,79,0,981,980,1,0,0,0,982,985,
        1,0,0,0,983,981,1,0,0,0,983,984,1,0,0,0,984,986,1,0,0,0,985,983,
        1,0,0,0,986,987,5,84,0,0,987,157,1,0,0,0,988,989,3,160,80,0,989,
        990,5,87,0,0,990,994,1,0,0,0,991,994,3,166,83,0,992,994,3,168,84,
        0,993,988,1,0,0,0,993,991,1,0,0,0,993,992,1,0,0,0,994,159,1,0,0,
        0,995,996,3,238,119,0,996,997,3,72,36,0,997,161,1,0,0,0,998,999,
        7,5,0,0,999,163,1,0,0,0,1000,1001,7,6,0,0,1001,165,1,0,0,0,1002,
        1004,3,6,3,0,1003,1002,1,0,0,0,1004,1007,1,0,0,0,1005,1003,1,0,0,
        0,1005,1006,1,0,0,0,1006,1011,1,0,0,0,1007,1005,1,0,0,0,1008,1012,
        3,10,5,0,1009,1012,3,26,13,0,1010,1012,3,146,73,0,1011,1008,1,0,
        0,0,1011,1009,1,0,0,0,1011,1010,1,0,0,0,1012,167,1,0,0,0,1013,1132,
        3,156,78,0,1014,1015,5,4,0,0,1015,1018,3,196,98,0,1016,1017,5,96,
        0,0,1017,1019,3,196,98,0,1018,1016,1,0,0,0,1018,1019,1,0,0,0,1019,
        1020,1,0,0,0,1020,1021,5,87,0,0,1021,1132,1,0,0,0,1022,1023,5,24,
        0,0,1023,1024,3,190,95,0,1024,1027,3,168,84,0,1025,1026,5,17,0,0,
        1026,1028,3,168,84,0,1027,1025,1,0,0,0,1027,1028,1,0,0,0,1028,1132,
        1,0,0,0,1029,1030,5,23,0,0,1030,1031,5,81,0,0,1031,1032,3,186,93,
        0,1032,1033,5,82,0,0,1033,1034,3,168,84,0,1034,1132,1,0,0,0,1035,
        1036,5,52,0,0,1036,1037,3,190,95,0,1037,1038,3,168,84,0,1038,1132,
        1,0,0,0,1039,1040,5,15,0,0,1040,1041,3,168,84,0,1041,1042,5,52,0,
        0,1042,1043,3,190,95,0,1043,1044,5,87,0,0,1044,1132,1,0,0,0,1045,
        1046,5,49,0,0,1046,1056,3,156,78,0,1047,1049,3,170,85,0,1048,1047,
        1,0,0,0,1049,1050,1,0,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,
        1053,1,0,0,0,1052,1054,3,174,87,0,1053,1052,1,0,0,0,1053,1054,1,
        0,0,0,1054,1057,1,0,0,0,1055,1057,3,174,87,0,1056,1048,1,0,0,0,1056,
        1055,1,0,0,0,1057,1132,1,0,0,0,1058,1059,5,49,0,0,1059,1060,3,176,
        88,0,1060,1064,3,156,78,0,1061,1063,3,170,85,0,1062,1061,1,0,0,0,
        1063,1066,1,0,0,0,1064,1062,1,0,0,0,1064,1065,1,0,0,0,1065,1068,
        1,0,0,0,1066,1064,1,0,0,0,1067,1069,3,174,87,0,1068,1067,1,0,0,0,
        1068,1069,1,0,0,0,1069,1132,1,0,0,0,1070,1071,5,43,0,0,1071,1072,
        3,190,95,0,1072,1076,5,83,0,0,1073,1075,3,182,91,0,1074,1073,1,0,
        0,0,1075,1078,1,0,0,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1082,
        1,0,0,0,1078,1076,1,0,0,0,1079,1081,3,184,92,0,1080,1079,1,0,0,0,
        1081,1084,1,0,0,0,1082,1080,1,0,0,0,1082,1083,1,0,0,0,1083,1085,
        1,0,0,0,1084,1082,1,0,0,0,1085,1086,5,84,0,0,1086,1132,1,0,0,0,1087,
        1088,5,44,0,0,1088,1089,3,190,95,0,1089,1090,3,156,78,0,1090,1132,
        1,0,0,0,1091,1093,5,38,0,0,1092,1094,3,196,98,0,1093,1092,1,0,0,
        0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,1132,5,87,0,0,1096,1097,
        5,46,0,0,1097,1098,3,196,98,0,1098,1099,5,87,0,0,1099,1132,1,0,0,
        0,1100,1102,5,6,0,0,1101,1103,3,162,81,0,1102,1101,1,0,0,0,1102,
        1103,1,0,0,0,1103,1104,1,0,0,0,1104,1132,5,87,0,0,1105,1107,5,13,
        0,0,1106,1108,3,162,81,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,
        1109,1,0,0,0,1109,1132,5,87,0,0,1110,1111,5,65,0,0,1111,1112,3,196,
        98,0,1112,1113,5,87,0,0,1113,1132,1,0,0,0,1114,1132,5,87,0,0,1115,
        1116,3,196,98,0,1116,1117,5,87,0,0,1117,1132,1,0,0,0,1118,1120,3,
        208,104,0,1119,1121,5,87,0,0,1120,1119,1,0,0,0,1120,1121,1,0,0,0,
        1121,1132,1,0,0,0,1122,1123,3,162,81,0,1123,1124,5,96,0,0,1124,1125,
        3,168,84,0,1125,1132,1,0,0,0,1126,1127,5,63,0,0,1127,1128,5,81,0,
        0,1128,1129,3,196,98,0,1129,1130,5,1,0,0,1130,1132,1,0,0,0,1131,
        1013,1,0,0,0,1131,1014,1,0,0,0,1131,1022,1,0,0,0,1131,1029,1,0,0,
        0,1131,1035,1,0,0,0,1131,1039,1,0,0,0,1131,1045,1,0,0,0,1131,1058,
        1,0,0,0,1131,1070,1,0,0,0,1131,1087,1,0,0,0,1131,1091,1,0,0,0,1131,
        1096,1,0,0,0,1131,1100,1,0,0,0,1131,1105,1,0,0,0,1131,1110,1,0,0,
        0,1131,1114,1,0,0,0,1131,1115,1,0,0,0,1131,1118,1,0,0,0,1131,1122,
        1,0,0,0,1131,1126,1,0,0,0,1132,169,1,0,0,0,1133,1134,5,9,0,0,1134,
        1138,5,81,0,0,1135,1137,3,8,4,0,1136,1135,1,0,0,0,1137,1140,1,0,
        0,0,1138,1136,1,0,0,0,1138,1139,1,0,0,0,1139,1141,1,0,0,0,1140,1138,
        1,0,0,0,1141,1142,3,172,86,0,1142,1143,3,162,81,0,1143,1144,5,82,
        0,0,1144,1145,3,156,78,0,1145,171,1,0,0,0,1146,1151,3,102,51,0,1147,
        1148,5,110,0,0,1148,1150,3,102,51,0,1149,1147,1,0,0,0,1150,1153,
        1,0,0,0,1151,1149,1,0,0,0,1151,1152,1,0,0,0,1152,173,1,0,0,0,1153,
        1151,1,0,0,0,1154,1155,5,21,0,0,1155,1156,3,156,78,0,1156,175,1,
        0,0,0,1157,1158,5,81,0,0,1158,1160,3,178,89,0,1159,1161,5,87,0,0,
        1160,1159,1,0,0,0,1160,1161,1,0,0,0,1161,1162,1,0,0,0,1162,1163,
        5,82,0,0,1163,177,1,0,0,0,1164,1169,3,180,90,0,1165,1166,5,87,0,
        0,1166,1168,3,180,90,0,1167,1165,1,0,0,0,1168,1171,1,0,0,0,1169,
        1167,1,0,0,0,1169,1170,1,0,0,0,1170,179,1,0,0,0,1171,1169,1,0,0,
        0,1172,1174,3,8,4,0,1173,1172,1,0,0,0,1174,1177,1,0,0,0,1175,1173,
        1,0,0,0,1175,1176,1,0,0,0,1176,1183,1,0,0,0,1177,1175,1,0,0,0,1178,
        1179,3,82,41,0,1179,1180,3,76,38,0,1180,1184,1,0,0,0,1181,1182,5,
        64,0,0,1182,1184,3,162,81,0,1183,1178,1,0,0,0,1183,1181,1,0,0,0,
        1184,1185,1,0,0,0,1185,1186,5,90,0,0,1186,1187,3,196,98,0,1187,1190,
        1,0,0,0,1188,1190,3,102,51,0,1189,1175,1,0,0,0,1189,1188,1,0,0,0,
        1190,181,1,0,0,0,1191,1193,3,184,92,0,1192,1191,1,0,0,0,1193,1194,
        1,0,0,0,1194,1192,1,0,0,0,1194,1195,1,0,0,0,1195,1197,1,0,0,0,1196,
        1198,3,158,79,0,1197,1196,1,0,0,0,1198,1199,1,0,0,0,1199,1197,1,
        0,0,0,1199,1200,1,0,0,0,1200,183,1,0,0,0,1201,1207,5,8,0,0,1202,
        1208,3,196,98,0,1203,1208,5,131,0,0,1204,1205,3,238,119,0,1205,1206,
        3,162,81,0,1206,1208,1,0,0,0,1207,1202,1,0,0,0,1207,1203,1,0,0,0,
        1207,1204,1,0,0,0,1208,1209,1,0,0,0,1209,1213,5,96,0,0,1210,1211,
        5,14,0,0,1211,1213,5,96,0,0,1212,1201,1,0,0,0,1212,1210,1,0,0,0,
        1213,185,1,0,0,0,1214,1215,3,238,119,0,1215,1216,3,74,37,0,1216,
        1217,5,87,0,0,1217,1218,3,196,98,0,1218,1219,5,87,0,0,1219,1220,
        3,196,98,0,1220,1223,1,0,0,0,1221,1223,5,2,0,0,1222,1214,1,0,0,0,
        1222,1221,1,0,0,0,1223,187,1,0,0,0,1224,1226,3,8,4,0,1225,1224,1,
        0,0,0,1226,1229,1,0,0,0,1227,1225,1,0,0,0,1227,1228,1,0,0,0,1228,
        1232,1,0,0,0,1229,1227,1,0,0,0,1230,1233,3,238,119,0,1231,1233,5,
        64,0,0,1232,1230,1,0,0,0,1232,1231,1,0,0,0,1233,1234,1,0,0,0,1234,
        1235,3,76,38,0,1235,1236,5,96,0,0,1236,1237,3,196,98,0,1237,189,
        1,0,0,0,1238,1239,5,81,0,0,1239,1240,3,196,98,0,1240,1241,5,82,0,
        0,1241,191,1,0,0,0,1242,1247,3,196,98,0,1243,1244,5,88,0,0,1244,
        1246,3,196,98,0,1245,1243,1,0,0,0,1246,1249,1,0,0,0,1247,1245,1,
        0,0,0,1247,1248,1,0,0,0,1248,193,1,0,0,0,1249,1247,1,0,0,0,1250,
        1251,3,162,81,0,1251,1252,3,248,124,0,1252,195,1,0,0,0,1253,1254,
        6,98,-1,0,1254,1297,3,206,103,0,1255,1297,3,194,97,0,1256,1257,3,
        238,119,0,1257,1263,5,125,0,0,1258,1260,3,242,121,0,1259,1258,1,
        0,0,0,1259,1260,1,0,0,0,1260,1261,1,0,0,0,1261,1264,3,162,81,0,1262,
        1264,5,33,0,0,1263,1259,1,0,0,0,1263,1262,1,0,0,0,1264,1297,1,0,
        0,0,1265,1266,3,216,108,0,1266,1268,5,125,0,0,1267,1269,3,242,121,
        0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,1270,1,0,0,0,1270,1271,
        5,33,0,0,1271,1297,1,0,0,0,1272,1297,3,208,104,0,1273,1274,7,7,0,
        0,1274,1297,3,196,98,17,1275,1279,5,81,0,0,1276,1278,3,112,56,0,
        1277,1276,1,0,0,0,1278,1281,1,0,0,0,1279,1277,1,0,0,0,1279,1280,
        1,0,0,0,1280,1282,1,0,0,0,1281,1279,1,0,0,0,1282,1287,3,238,119,
        0,1283,1284,5,109,0,0,1284,1286,3,238,119,0,1285,1283,1,0,0,0,1286,
        1289,1,0,0,0,1287,1285,1,0,0,0,1287,1288,1,0,0,0,1288,1290,1,0,0,
        0,1289,1287,1,0,0,0,1290,1291,5,82,0,0,1291,1292,3,196,98,16,1292,
        1297,1,0,0,0,1293,1294,5,33,0,0,1294,1297,3,218,109,0,1295,1297,
        3,200,100,0,1296,1253,1,0,0,0,1296,1255,1,0,0,0,1296,1256,1,0,0,
        0,1296,1265,1,0,0,0,1296,1272,1,0,0,0,1296,1273,1,0,0,0,1296,1275,
        1,0,0,0,1296,1293,1,0,0,0,1296,1295,1,0,0,0,1297,1381,1,0,0,0,1298,
        1299,10,14,0,0,1299,1300,7,8,0,0,1300,1380,3,196,98,15,1301,1302,
        10,13,0,0,1302,1303,7,9,0,0,1303,1380,3,196,98,14,1304,1312,10,12,
        0,0,1305,1306,5,92,0,0,1306,1313,5,92,0,0,1307,1308,5,91,0,0,1308,
        1309,5,91,0,0,1309,1313,5,91,0,0,1310,1311,5,91,0,0,1311,1313,5,
        91,0,0,1312,1305,1,0,0,0,1312,1307,1,0,0,0,1312,1310,1,0,0,0,1313,
        1314,1,0,0,0,1314,1380,3,196,98,13,1315,1316,10,11,0,0,1316,1317,
        7,10,0,0,1317,1380,3,196,98,12,1318,1319,10,9,0,0,1319,1320,7,11,
        0,0,1320,1380,3,196,98,10,1321,1322,10,8,0,0,1322,1323,5,109,0,0,
        1323,1380,3,196,98,9,1324,1325,10,7,0,0,1325,1326,5,111,0,0,1326,
        1380,3,196,98,8,1327,1328,10,6,0,0,1328,1329,5,110,0,0,1329,1380,
        3,196,98,7,1330,1331,10,5,0,0,1331,1332,5,101,0,0,1332,1380,3,196,
        98,6,1333,1334,10,4,0,0,1334,1335,5,102,0,0,1335,1380,3,196,98,5,
        1336,1337,10,3,0,0,1337,1338,5,95,0,0,1338,1339,3,196,98,0,1339,
        1340,5,96,0,0,1340,1341,3,196,98,3,1341,1380,1,0,0,0,1342,1343,10,
        2,0,0,1343,1344,7,12,0,0,1344,1380,3,196,98,2,1345,1346,10,25,0,
        0,1346,1347,5,85,0,0,1347,1348,3,196,98,0,1348,1349,5,86,0,0,1349,
        1380,1,0,0,0,1350,1351,10,24,0,0,1351,1363,5,89,0,0,1352,1364,3,
        162,81,0,1353,1364,3,194,97,0,1354,1364,5,45,0,0,1355,1357,5,33,
        0,0,1356,1358,3,234,117,0,1357,1356,1,0,0,0,1357,1358,1,0,0,0,1358,
        1359,1,0,0,0,1359,1364,3,222,111,0,1360,1361,5,42,0,0,1361,1364,
        3,244,122,0,1362,1364,3,228,114,0,1363,1352,1,0,0,0,1363,1353,1,
        0,0,0,1363,1354,1,0,0,0,1363,1355,1,0,0,0,1363,1360,1,0,0,0,1363,
        1362,1,0,0,0,1364,1380,1,0,0,0,1365,1366,10,22,0,0,1366,1368,5,125,
        0,0,1367,1369,3,242,121,0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,
        1370,1,0,0,0,1370,1380,3,162,81,0,1371,1372,10,18,0,0,1372,1380,
        7,13,0,0,1373,1374,10,10,0,0,1374,1377,5,28,0,0,1375,1378,3,238,
        119,0,1376,1378,3,198,99,0,1377,1375,1,0,0,0,1377,1376,1,0,0,0,1378,
        1380,1,0,0,0,1379,1298,1,0,0,0,1379,1301,1,0,0,0,1379,1304,1,0,0,
        0,1379,1315,1,0,0,0,1379,1318,1,0,0,0,1379,1321,1,0,0,0,1379,1324,
        1,0,0,0,1379,1327,1,0,0,0,1379,1330,1,0,0,0,1379,1333,1,0,0,0,1379,
        1336,1,0,0,0,1379,1342,1,0,0,0,1379,1345,1,0,0,0,1379,1350,1,0,0,
        0,1379,1365,1,0,0,0,1379,1371,1,0,0,0,1379,1373,1,0,0,0,1380,1383,
        1,0,0,0,1381,1379,1,0,0,0,1381,1382,1,0,0,0,1382,197,1,0,0,0,1383,
        1381,1,0,0,0,1384,1386,3,8,4,0,1385,1384,1,0,0,0,1386,1389,1,0,0,
        0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,1390,1,0,0,0,1389,1387,
        1,0,0,0,1390,1394,3,238,119,0,1391,1393,3,112,56,0,1392,1391,1,0,
        0,0,1393,1396,1,0,0,0,1394,1392,1,0,0,0,1394,1395,1,0,0,0,1395,1397,
        1,0,0,0,1396,1394,1,0,0,0,1397,1398,3,162,81,0,1398,199,1,0,0,0,
        1399,1400,3,202,101,0,1400,1401,5,124,0,0,1401,1402,3,204,102,0,
        1402,201,1,0,0,0,1403,1426,3,162,81,0,1404,1406,5,81,0,0,1405,1407,
        3,92,46,0,1406,1405,1,0,0,0,1406,1407,1,0,0,0,1407,1408,1,0,0,0,
        1408,1426,5,82,0,0,1409,1410,5,81,0,0,1410,1415,3,162,81,0,1411,
        1412,5,88,0,0,1412,1414,3,162,81,0,1413,1411,1,0,0,0,1414,1417,1,
        0,0,0,1415,1413,1,0,0,0,1415,1416,1,0,0,0,1416,1418,1,0,0,0,1417,
        1415,1,0,0,0,1418,1419,5,82,0,0,1419,1426,1,0,0,0,1420,1422,5,81,
        0,0,1421,1423,3,98,49,0,1422,1421,1,0,0,0,1422,1423,1,0,0,0,1423,
        1424,1,0,0,0,1424,1426,5,82,0,0,1425,1403,1,0,0,0,1425,1404,1,0,
        0,0,1425,1409,1,0,0,0,1425,1420,1,0,0,0,1426,203,1,0,0,0,1427,1430,
        3,196,98,0,1428,1430,3,156,78,0,1429,1427,1,0,0,0,1429,1428,1,0,
        0,0,1430,205,1,0,0,0,1431,1432,5,81,0,0,1432,1433,3,196,98,0,1433,
        1434,5,82,0,0,1434,1450,1,0,0,0,1435,1450,5,45,0,0,1436,1450,5,42,
        0,0,1437,1450,3,104,52,0,1438,1450,3,162,81,0,1439,1440,3,44,22,
        0,1440,1441,5,89,0,0,1441,1442,5,11,0,0,1442,1450,1,0,0,0,1443,1447,
        3,234,117,0,1444,1448,3,246,123,0,1445,1446,5,45,0,0,1446,1448,3,
        248,124,0,1447,1444,1,0,0,0,1447,1445,1,0,0,0,1448,1450,1,0,0,0,
        1449,1431,1,0,0,0,1449,1435,1,0,0,0,1449,1436,1,0,0,0,1449,1437,
        1,0,0,0,1449,1438,1,0,0,0,1449,1439,1,0,0,0,1449,1443,1,0,0,0,1450,
        207,1,0,0,0,1451,1452,5,43,0,0,1452,1453,3,190,95,0,1453,1457,5,
        83,0,0,1454,1456,3,210,105,0,1455,1454,1,0,0,0,1456,1459,1,0,0,0,
        1457,1455,1,0,0,0,1457,1458,1,0,0,0,1458,1460,1,0,0,0,1459,1457,
        1,0,0,0,1460,1461,5,84,0,0,1461,209,1,0,0,0,1462,1466,5,8,0,0,1463,
        1467,3,192,96,0,1464,1467,5,80,0,0,1465,1467,3,212,106,0,1466,1463,
        1,0,0,0,1466,1464,1,0,0,0,1466,1465,1,0,0,0,1467,1468,1,0,0,0,1468,
        1469,7,14,0,0,1469,1474,3,214,107,0,1470,1471,5,14,0,0,1471,1472,
        7,14,0,0,1472,1474,3,214,107,0,1473,1462,1,0,0,0,1473,1470,1,0,0,
        0,1474,211,1,0,0,0,1475,1476,6,106,-1,0,1476,1477,5,81,0,0,1477,
        1478,3,212,106,0,1478,1479,5,82,0,0,1479,1502,1,0,0,0,1480,1482,
        3,8,4,0,1481,1480,1,0,0,0,1482,1485,1,0,0,0,1483,1481,1,0,0,0,1483,
        1484,1,0,0,0,1484,1486,1,0,0,0,1485,1483,1,0,0,0,1486,1490,3,238,
        119,0,1487,1489,3,112,56,0,1488,1487,1,0,0,0,1489,1492,1,0,0,0,1490,
        1488,1,0,0,0,1490,1491,1,0,0,0,1491,1493,1,0,0,0,1492,1490,1,0,0,
        0,1493,1498,3,162,81,0,1494,1495,5,101,0,0,1495,1497,3,196,98,0,
        1496,1494,1,0,0,0,1497,1500,1,0,0,0,1498,1496,1,0,0,0,1498,1499,
        1,0,0,0,1499,1502,1,0,0,0,1500,1498,1,0,0,0,1501,1475,1,0,0,0,1501,
        1483,1,0,0,0,1502,1508,1,0,0,0,1503,1504,10,1,0,0,1504,1505,5,101,
        0,0,1505,1507,3,196,98,0,1506,1503,1,0,0,0,1507,1510,1,0,0,0,1508,
        1506,1,0,0,0,1508,1509,1,0,0,0,1509,213,1,0,0,0,1510,1508,1,0,0,
        0,1511,1519,3,156,78,0,1512,1514,3,158,79,0,1513,1512,1,0,0,0,1514,
        1517,1,0,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,1519,1,0,0,
        0,1517,1515,1,0,0,0,1518,1511,1,0,0,0,1518,1515,1,0,0,0,1519,215,
        1,0,0,0,1520,1521,3,82,41,0,1521,1522,5,89,0,0,1522,1524,1,0,0,0,
        1523,1520,1,0,0,0,1523,1524,1,0,0,0,1524,1528,1,0,0,0,1525,1527,
        3,112,56,0,1526,1525,1,0,0,0,1527,1530,1,0,0,0,1528,1526,1,0,0,0,
        1528,1529,1,0,0,0,1529,1531,1,0,0,0,1530,1528,1,0,0,0,1531,1533,
        3,162,81,0,1532,1534,3,242,121,0,1533,1532,1,0,0,0,1533,1534,1,0,
        0,0,1534,217,1,0,0,0,1535,1536,3,162,81,0,1536,1537,3,248,124,0,
        1537,219,1,0,0,0,1538,1541,3,162,81,0,1539,1541,3,240,120,0,1540,
        1538,1,0,0,0,1540,1539,1,0,0,0,1541,221,1,0,0,0,1542,1544,3,162,
        81,0,1543,1545,3,232,116,0,1544,1543,1,0,0,0,1544,1545,1,0,0,0,1545,
        1546,1,0,0,0,1546,1547,3,226,113,0,1547,223,1,0,0,0,1548,1549,5,
        85,0,0,1549,1551,5,86,0,0,1550,1548,1,0,0,0,1551,1552,1,0,0,0,1552,
        1550,1,0,0,0,1552,1553,1,0,0,0,1553,1554,1,0,0,0,1554,1571,3,80,
        40,0,1555,1556,5,85,0,0,1556,1557,3,196,98,0,1557,1558,5,86,0,0,
        1558,1560,1,0,0,0,1559,1555,1,0,0,0,1560,1561,1,0,0,0,1561,1559,
        1,0,0,0,1561,1562,1,0,0,0,1562,1567,1,0,0,0,1563,1564,5,85,0,0,1564,
        1566,5,86,0,0,1565,1563,1,0,0,0,1566,1569,1,0,0,0,1567,1565,1,0,
        0,0,1567,1568,1,0,0,0,1568,1571,1,0,0,0,1569,1567,1,0,0,0,1570,1550,
        1,0,0,0,1570,1559,1,0,0,0,1571,225,1,0,0,0,1572,1574,3,248,124,0,
        1573,1575,3,28,14,0,1574,1573,1,0,0,0,1574,1575,1,0,0,0,1575,227,
        1,0,0,0,1576,1577,3,234,117,0,1577,1578,3,246,123,0,1578,229,1,0,
        0,0,1579,1580,5,92,0,0,1580,1583,5,91,0,0,1581,1583,3,242,121,0,
        1582,1579,1,0,0,0,1582,1581,1,0,0,0,1583,231,1,0,0,0,1584,1585,5,
        92,0,0,1585,1588,5,91,0,0,1586,1588,3,234,117,0,1587,1584,1,0,0,
        0,1587,1586,1,0,0,0,1588,233,1,0,0,0,1589,1590,5,92,0,0,1590,1591,
        3,236,118,0,1591,1592,5,91,0,0,1592,235,1,0,0,0,1593,1598,3,238,
        119,0,1594,1595,5,88,0,0,1595,1597,3,238,119,0,1596,1594,1,0,0,0,
        1597,1600,1,0,0,0,1598,1596,1,0,0,0,1598,1599,1,0,0,0,1599,237,1,
        0,0,0,1600,1598,1,0,0,0,1601,1604,3,82,41,0,1602,1604,3,240,120,
        0,1603,1601,1,0,0,0,1603,1602,1,0,0,0,1604,1609,1,0,0,0,1605,1606,
        5,85,0,0,1606,1608,5,86,0,0,1607,1605,1,0,0,0,1608,1611,1,0,0,0,
        1609,1607,1,0,0,0,1609,1610,1,0,0,0,1610,239,1,0,0,0,1611,1609,1,
        0,0,0,1612,1613,7,15,0,0,1613,241,1,0,0,0,1614,1615,5,92,0,0,1615,
        1620,3,84,42,0,1616,1617,5,88,0,0,1617,1619,3,84,42,0,1618,1616,
        1,0,0,0,1619,1622,1,0,0,0,1620,1618,1,0,0,0,1620,1621,1,0,0,0,1621,
        1623,1,0,0,0,1622,1620,1,0,0,0,1623,1624,5,91,0,0,1624,243,1,0,0,
        0,1625,1635,3,248,124,0,1626,1628,5,89,0,0,1627,1629,3,242,121,0,
        1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1630,1,0,0,0,1630,1632,
        3,162,81,0,1631,1633,3,248,124,0,1632,1631,1,0,0,0,1632,1633,1,0,
        0,0,1633,1635,1,0,0,0,1634,1625,1,0,0,0,1634,1626,1,0,0,0,1635,245,
        1,0,0,0,1636,1637,5,42,0,0,1637,1642,3,244,122,0,1638,1639,3,162,
        81,0,1639,1640,3,248,124,0,1640,1642,1,0,0,0,1641,1636,1,0,0,0,1641,
        1638,1,0,0,0,1642,247,1,0,0,0,1643,1645,5,81,0,0,1644,1646,3,192,
        96,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1647,1,0,0,0,1647,
        1648,5,82,0,0,1648,249,1,0,0,0,195,253,259,264,271,277,283,287,297,
        305,313,317,324,331,335,338,341,350,356,361,364,370,376,380,384,
        392,401,408,416,420,425,436,447,451,454,458,474,483,493,498,508,
        516,526,535,546,551,560,570,575,584,590,597,602,610,614,616,622,
        628,633,639,645,647,654,659,664,667,669,679,689,694,697,702,711,
        718,729,735,746,756,767,776,781,784,791,801,809,812,815,828,836,
        841,849,853,857,861,865,867,871,877,885,895,904,914,922,936,943,
        948,954,963,972,974,983,993,1005,1011,1018,1027,1050,1053,1056,1064,
        1068,1076,1082,1093,1102,1107,1120,1131,1138,1151,1160,1169,1175,
        1183,1189,1194,1199,1207,1212,1222,1227,1232,1247,1259,1263,1268,
        1279,1287,1296,1312,1357,1363,1368,1377,1379,1381,1387,1394,1406,
        1415,1422,1425,1429,1447,1449,1457,1466,1473,1483,1490,1498,1501,
        1508,1515,1518,1523,1528,1533,1540,1544,1552,1561,1567,1570,1574,
        1582,1587,1598,1603,1609,1620,1628,1632,1634,1641,1645
    ]

class JavaGrammarParser ( Parser ):

    grammarFileName = "JavaGrammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "');'", "';;'", "'abstract'", "'assert'", 
                     "'boolean'", "'break'", "'byte'", "'case'", "'catch'", 
                     "'char'", "'class'", "'const'", "'continue'", "'default'", 
                     "'do'", "'double'", "'else'", "'enum'", "'extends'", 
                     "'final'", "'finally'", "'float'", "'for'", "'if'", 
                     "'goto'", "'implements'", "'import'", "'instanceof'", 
                     "'int'", "'interface'", "'long'", "'native'", "'new'", 
                     "'package'", "'private'", "'protected'", "'public'", 
                     "'return'", "'short'", "'static'", "'strictfp'", "'super'", 
                     "'switch'", "'synchronized'", "'this'", "'throw'", 
                     "'throws'", "'transient'", "'try'", "'void'", "'volatile'", 
                     "'while'", "'module'", "'open'", "'requires'", "'exports'", 
                     "'opens'", "'to'", "'uses'", "'provides'", "'with'", 
                     "'transitive'", "'System.out.println'", "'var'", "'yield'", 
                     "'record'", "'sealed'", "'permits'", "'non-sealed'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'null'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", 
                     "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", 
                     "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
                     "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", 
                     "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
                     "'<<='", "'>>='", "'>>>='", "'->'", "'::'", "'@'", 
                     "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "ABSTRACT", 
                      "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
                      "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", 
                      "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", 
                      "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", 
                      "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", 
                      "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", 
                      "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", 
                      "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", 
                      "TRANSIENT", "TRY", "VOID", "VOLATILE", "WHILE", "MODULE", 
                      "OPEN", "REQUIRES", "EXPORTS", "OPENS", "TO", "USES", 
                      "PROVIDES", "WITH", "TRANSITIVE", "PRINT", "VAR", 
                      "YIELD", "RECORD", "SEALED", "PERMITS", "NON_SEALED", 
                      "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", 
                      "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", 
                      "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", 
                      "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
                      "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", 
                      "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
                      "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
                      "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "ARROW", "COLONCOLON", "AT", "ELLIPSIS", "WS", "COMMENT", 
                      "LINE_COMMENT", "IDENTIFIER" ]

    RULE_compilationUnit = 0
    RULE_typeDeclaration = 1
    RULE_modifier = 2
    RULE_classOrInterfaceModifier = 3
    RULE_variableModifier = 4
    RULE_classDeclaration = 5
    RULE_typeParameters = 6
    RULE_typeParameter = 7
    RULE_typeBound = 8
    RULE_enumDeclaration = 9
    RULE_enumConstants = 10
    RULE_enumConstant = 11
    RULE_enumBodyDeclarations = 12
    RULE_interfaceDeclaration = 13
    RULE_classBody = 14
    RULE_interfaceBody = 15
    RULE_classBodyDeclaration = 16
    RULE_memberDeclaration = 17
    RULE_methodDeclaration = 18
    RULE_methodParameters = 19
    RULE_methodParameter = 20
    RULE_methodBody = 21
    RULE_typeTypeOrVoid = 22
    RULE_genericMethodDeclaration = 23
    RULE_genericConstructorDeclaration = 24
    RULE_constructorDeclaration = 25
    RULE_compactConstructorDeclaration = 26
    RULE_fieldDeclaration = 27
    RULE_interfaceBodyDeclaration = 28
    RULE_interfaceMemberDeclaration = 29
    RULE_constDeclaration = 30
    RULE_constantDeclarator = 31
    RULE_interfaceMethodDeclaration = 32
    RULE_interfaceMethodModifier = 33
    RULE_genericInterfaceMethodDeclaration = 34
    RULE_interfaceCommonBodyDeclaration = 35
    RULE_variableDeclarators = 36
    RULE_variableDeclarator = 37
    RULE_variableDeclaratorId = 38
    RULE_variableInitializer = 39
    RULE_arrayInitializer = 40
    RULE_classOrInterfaceType = 41
    RULE_typeArgument = 42
    RULE_qualifiedNameList = 43
    RULE_formalParameters = 44
    RULE_receiverParameter = 45
    RULE_formalParameterList = 46
    RULE_formalParameter = 47
    RULE_lastFormalParameter = 48
    RULE_lambdaLVTIList = 49
    RULE_lambdaLVTIParameter = 50
    RULE_qualifiedName = 51
    RULE_literal = 52
    RULE_integerLiteral = 53
    RULE_floatLiteral = 54
    RULE_altAnnotationQualifiedName = 55
    RULE_annotation = 56
    RULE_elementValuePairs = 57
    RULE_elementValuePair = 58
    RULE_elementValue = 59
    RULE_elementValueArrayInitializer = 60
    RULE_annotationTypeDeclaration = 61
    RULE_annotationTypeBody = 62
    RULE_annotationTypeElementDeclaration = 63
    RULE_annotationTypeElementRest = 64
    RULE_annotationMethodOrConstantRest = 65
    RULE_annotationMethodRest = 66
    RULE_annotationConstantRest = 67
    RULE_defaultValue = 68
    RULE_moduleDeclaration = 69
    RULE_moduleBody = 70
    RULE_moduleDirective = 71
    RULE_requiresModifier = 72
    RULE_recordDeclaration = 73
    RULE_recordHeader = 74
    RULE_recordComponentList = 75
    RULE_recordComponent = 76
    RULE_recordBody = 77
    RULE_block = 78
    RULE_blockStatement = 79
    RULE_localVariableDeclaration = 80
    RULE_identifier = 81
    RULE_typeIdentifier = 82
    RULE_localTypeDeclaration = 83
    RULE_statement = 84
    RULE_catchClause = 85
    RULE_catchType = 86
    RULE_finallyBlock = 87
    RULE_resourceSpecification = 88
    RULE_resources = 89
    RULE_resource = 90
    RULE_switchBlockStatementGroup = 91
    RULE_switchLabel = 92
    RULE_forControl = 93
    RULE_enhancedForControl = 94
    RULE_parExpression = 95
    RULE_expressionList = 96
    RULE_methodCall = 97
    RULE_expression = 98
    RULE_pattern = 99
    RULE_lambdaExpression = 100
    RULE_lambdaParameters = 101
    RULE_lambdaBody = 102
    RULE_primary = 103
    RULE_switchExpression = 104
    RULE_switchLabeledRule = 105
    RULE_guardedPattern = 106
    RULE_switchRuleOutcome = 107
    RULE_classType = 108
    RULE_creator = 109
    RULE_createdName = 110
    RULE_innerCreator = 111
    RULE_arrayCreatorRest = 112
    RULE_classCreatorRest = 113
    RULE_explicitGenericInvocation = 114
    RULE_typeArgumentsOrDiamond = 115
    RULE_nonWildcardTypeArgumentsOrDiamond = 116
    RULE_nonWildcardTypeArguments = 117
    RULE_typeList = 118
    RULE_typeType = 119
    RULE_primitiveType = 120
    RULE_typeArguments = 121
    RULE_superSuffix = 122
    RULE_explicitGenericInvocationSuffix = 123
    RULE_arguments = 124

    ruleNames =  [ "compilationUnit", "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "typeParameters", 
                   "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
                   "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
                   "classBody", "interfaceBody", "classBodyDeclaration", 
                   "memberDeclaration", "methodDeclaration", "methodParameters", 
                   "methodParameter", "methodBody", "typeTypeOrVoid", "genericMethodDeclaration", 
                   "genericConstructorDeclaration", "constructorDeclaration", 
                   "compactConstructorDeclaration", "fieldDeclaration", 
                   "interfaceBodyDeclaration", "interfaceMemberDeclaration", 
                   "constDeclaration", "constantDeclarator", "interfaceMethodDeclaration", 
                   "interfaceMethodModifier", "genericInterfaceMethodDeclaration", 
                   "interfaceCommonBodyDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "classOrInterfaceType", "typeArgument", 
                   "qualifiedNameList", "formalParameters", "receiverParameter", 
                   "formalParameterList", "formalParameter", "lastFormalParameter", 
                   "lambdaLVTIList", "lambdaLVTIParameter", "qualifiedName", 
                   "literal", "integerLiteral", "floatLiteral", "altAnnotationQualifiedName", 
                   "annotation", "elementValuePairs", "elementValuePair", 
                   "elementValue", "elementValueArrayInitializer", "annotationTypeDeclaration", 
                   "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "moduleDeclaration", "moduleBody", "moduleDirective", 
                   "requiresModifier", "recordDeclaration", "recordHeader", 
                   "recordComponentList", "recordComponent", "recordBody", 
                   "block", "blockStatement", "localVariableDeclaration", 
                   "identifier", "typeIdentifier", "localTypeDeclaration", 
                   "statement", "catchClause", "catchType", "finallyBlock", 
                   "resourceSpecification", "resources", "resource", "switchBlockStatementGroup", 
                   "switchLabel", "forControl", "enhancedForControl", "parExpression", 
                   "expressionList", "methodCall", "expression", "pattern", 
                   "lambdaExpression", "lambdaParameters", "lambdaBody", 
                   "primary", "switchExpression", "switchLabeledRule", "guardedPattern", 
                   "switchRuleOutcome", "classType", "creator", "createdName", 
                   "innerCreator", "arrayCreatorRest", "classCreatorRest", 
                   "explicitGenericInvocation", "typeArgumentsOrDiamond", 
                   "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
                   "typeList", "typeType", "primitiveType", "typeArguments", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    ABSTRACT=3
    ASSERT=4
    BOOLEAN=5
    BREAK=6
    BYTE=7
    CASE=8
    CATCH=9
    CHAR=10
    CLASS=11
    CONST=12
    CONTINUE=13
    DEFAULT=14
    DO=15
    DOUBLE=16
    ELSE=17
    ENUM=18
    EXTENDS=19
    FINAL=20
    FINALLY=21
    FLOAT=22
    FOR=23
    IF=24
    GOTO=25
    IMPLEMENTS=26
    IMPORT=27
    INSTANCEOF=28
    INT=29
    INTERFACE=30
    LONG=31
    NATIVE=32
    NEW=33
    PACKAGE=34
    PRIVATE=35
    PROTECTED=36
    PUBLIC=37
    RETURN=38
    SHORT=39
    STATIC=40
    STRICTFP=41
    SUPER=42
    SWITCH=43
    SYNCHRONIZED=44
    THIS=45
    THROW=46
    THROWS=47
    TRANSIENT=48
    TRY=49
    VOID=50
    VOLATILE=51
    WHILE=52
    MODULE=53
    OPEN=54
    REQUIRES=55
    EXPORTS=56
    OPENS=57
    TO=58
    USES=59
    PROVIDES=60
    WITH=61
    TRANSITIVE=62
    PRINT=63
    VAR=64
    YIELD=65
    RECORD=66
    SEALED=67
    PERMITS=68
    NON_SEALED=69
    DECIMAL_LITERAL=70
    HEX_LITERAL=71
    OCT_LITERAL=72
    BINARY_LITERAL=73
    FLOAT_LITERAL=74
    HEX_FLOAT_LITERAL=75
    BOOL_LITERAL=76
    CHAR_LITERAL=77
    STRING_LITERAL=78
    TEXT_BLOCK=79
    NULL_LITERAL=80
    LPAREN=81
    RPAREN=82
    LBRACE=83
    RBRACE=84
    LBRACK=85
    RBRACK=86
    SEMI=87
    COMMA=88
    DOT=89
    ASSIGN=90
    GT=91
    LT=92
    BANG=93
    TILDE=94
    QUESTION=95
    COLON=96
    EQUAL=97
    LE=98
    GE=99
    NOTEQUAL=100
    AND=101
    OR=102
    INC=103
    DEC=104
    ADD=105
    SUB=106
    MUL=107
    DIV=108
    BITAND=109
    BITOR=110
    CARET=111
    MOD=112
    ADD_ASSIGN=113
    SUB_ASSIGN=114
    MUL_ASSIGN=115
    DIV_ASSIGN=116
    AND_ASSIGN=117
    OR_ASSIGN=118
    XOR_ASSIGN=119
    MOD_ASSIGN=120
    LSHIFT_ASSIGN=121
    RSHIFT_ASSIGN=122
    URSHIFT_ASSIGN=123
    ARROW=124
    COLONCOLON=125
    AT=126
    ELLIPSIS=127
    WS=128
    COMMENT=129
    LINE_COMMENT=130
    IDENTIFIER=131

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.TypeDeclarationContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = JavaGrammarParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1341104588808) != 0):
                self.state = 250
                self.typeDeclaration()
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.InterfaceDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDeclaration" ):
                return visitor.visitTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def typeDeclaration(self):

        localctx = JavaGrammarParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_typeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1340030844936) != 0):
                self.state = 256
                self.classOrInterfaceModifier()
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.state = 262
                self.classDeclaration()
                pass
            elif token in [30]:
                self.state = 263
                self.interfaceDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassOrInterfaceModifierContext,0)


        def NATIVE(self):
            return self.getToken(JavaGrammarParser.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaGrammarParser.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(JavaGrammarParser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaGrammarParser.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = JavaGrammarParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_modifier)
        try:
            self.state = 271
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 20, 35, 36, 37, 40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 266
                self.classOrInterfaceModifier()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 267
                self.match(JavaGrammarParser.NATIVE)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 268
                self.match(JavaGrammarParser.SYNCHRONIZED)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 4)
                self.state = 269
                self.match(JavaGrammarParser.TRANSIENT)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 5)
                self.state = 270
                self.match(JavaGrammarParser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(JavaGrammarParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaGrammarParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaGrammarParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaGrammarParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaGrammarParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaGrammarParser.FINAL, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_classOrInterfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceModifier" ):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceModifier" ):
                listener.exitClassOrInterfaceModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassOrInterfaceModifier" ):
                return visitor.visitClassOrInterfaceModifier(self)
            else:
                return visitor.visitChildren(self)




    def classOrInterfaceModifier(self):

        localctx = JavaGrammarParser.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_classOrInterfaceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1340030844936) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(JavaGrammarParser.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableModifier" ):
                return visitor.visitVariableModifier(self)
            else:
                return visitor.visitChildren(self)




    def variableModifier(self):

        localctx = JavaGrammarParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_variableModifier)
        try:
            self.state = 277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 275
                self.match(JavaGrammarParser.FINAL)
                pass
            elif token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 126, 131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 276
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaGrammarParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassBodyContext,0)


        def EXTENDS(self):
            return self.getToken(JavaGrammarParser.EXTENDS, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaGrammarParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = JavaGrammarParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(JavaGrammarParser.CLASS)
            self.state = 280
            self.identifier()
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 281
                self.match(JavaGrammarParser.EXTENDS)
                self.state = 282
                self.typeType()


            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 285
                self.match(JavaGrammarParser.IMPLEMENTS)
                self.state = 286
                self.typeList()


            self.state = 289
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaGrammarParser.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.TypeParameterContext,i)


        def GT(self):
            return self.getToken(JavaGrammarParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameters" ):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def typeParameters(self):

        localctx = JavaGrammarParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(JavaGrammarParser.LT)
            self.state = 292
            self.typeParameter()
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 293
                self.match(JavaGrammarParser.COMMA)
                self.state = 294
                self.typeParameter()
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 300
            self.match(JavaGrammarParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaGrammarParser.EXTENDS, 0)

        def typeBound(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeBoundContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = JavaGrammarParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 302
                    self.annotation() 
                self.state = 307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 308
            self.identifier()
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 309
                self.match(JavaGrammarParser.EXTENDS)
                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 310
                        self.annotation() 
                    self.state = 315
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 316
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.BITAND)
            else:
                return self.getToken(JavaGrammarParser.BITAND, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeBound" ):
                return visitor.visitTypeBound(self)
            else:
                return visitor.visitChildren(self)




    def typeBound(self):

        localctx = JavaGrammarParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.typeType()
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==109:
                self.state = 320
                self.match(JavaGrammarParser.BITAND)
                self.state = 321
                self.typeType()
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaGrammarParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def LBRACE(self):
            return self.getToken(JavaGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaGrammarParser.RBRACE, 0)

        def IMPLEMENTS(self):
            return self.getToken(JavaGrammarParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeListContext,0)


        def enumConstants(self):
            return self.getTypedRuleContext(JavaGrammarParser.EnumConstantsContext,0)


        def COMMA(self):
            return self.getToken(JavaGrammarParser.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(JavaGrammarParser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDeclaration" ):
                return visitor.visitEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def enumDeclaration(self):

        localctx = JavaGrammarParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(JavaGrammarParser.ENUM)
            self.state = 328
            self.identifier()
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 329
                self.match(JavaGrammarParser.IMPLEMENTS)
                self.state = 330
                self.typeList()


            self.state = 333
            self.match(JavaGrammarParser.LBRACE)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64511) != 0) or _la==126 or _la==131:
                self.state = 334
                self.enumConstants()


            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 337
                self.match(JavaGrammarParser.COMMA)


            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 340
                self.enumBodyDeclarations()


            self.state = 343
            self.match(JavaGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumConstants" ):
                return visitor.visitEnumConstants(self)
            else:
                return visitor.visitChildren(self)




    def enumConstants(self):

        localctx = JavaGrammarParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.enumConstant()
            self.state = 350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 346
                    self.match(JavaGrammarParser.COMMA)
                    self.state = 347
                    self.enumConstant() 
                self.state = 352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,i)


        def arguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumConstant" ):
                return visitor.visitEnumConstant(self)
            else:
                return visitor.visitChildren(self)




    def enumConstant(self):

        localctx = JavaGrammarParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 353
                    self.annotation() 
                self.state = 358
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 359
            self.identifier()
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 360
                self.arguments()


            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 363
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaGrammarParser.SEMI, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumBodyDeclarations" ):
                return visitor.visitEnumBodyDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def enumBodyDeclarations(self):

        localctx = JavaGrammarParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(JavaGrammarParser.SEMI)
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9214366730075311272) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8388639) != 0) or _la==131:
                self.state = 367
                self.classBodyDeclaration()
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaGrammarParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def interfaceBody(self):
            return self.getTypedRuleContext(JavaGrammarParser.InterfaceBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaGrammarParser.EXTENDS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaGrammarParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDeclaration" ):
                return visitor.visitInterfaceDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDeclaration(self):

        localctx = JavaGrammarParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(JavaGrammarParser.INTERFACE)
            self.state = 374
            self.identifier()
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 375
                self.typeParameters()


            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 378
                self.match(JavaGrammarParser.EXTENDS)
                self.state = 379
                self.typeList()


            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 382
                self.match(JavaGrammarParser.PERMITS)
                self.state = 383
                self.typeList()


            self.state = 386
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaGrammarParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = JavaGrammarParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(JavaGrammarParser.LBRACE)
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9214366730075311272) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8388639) != 0) or _la==131:
                self.state = 389
                self.classBodyDeclaration()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 395
            self.match(JavaGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaGrammarParser.RBRACE, 0)

        def interfaceBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.InterfaceBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceBody" ):
                return visitor.visitInterfaceBody(self)
            else:
                return visitor.visitChildren(self)




    def interfaceBody(self):

        localctx = JavaGrammarParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(JavaGrammarParser.LBRACE)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9218045701350837416) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611686018704211999) != 0) or _la==131:
                self.state = 398
                self.interfaceBodyDeclaration()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 404
            self.match(JavaGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaGrammarParser.SEMI, 0)

        def memberDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.MemberDeclarationContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBodyDeclaration" ):
                return visitor.visitClassBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classBodyDeclaration(self):

        localctx = JavaGrammarParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_classBodyDeclaration)
        try:
            self.state = 408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [87]:
                self.enterOuterAlt(localctx, 1)
                self.state = 406
                self.match(JavaGrammarParser.SEMI)
                pass
            elif token in [3, 5, 7, 10, 11, 16, 20, 22, 29, 31, 35, 36, 37, 39, 40, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 407
                self.memberDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.MethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.FieldDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.ConstructorDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration" ):
                return visitor.visitMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def memberDeclaration(self):

        localctx = JavaGrammarParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_memberDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 410
                self.methodDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 411
                self.fieldDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 412
                self.constructorDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1340030844936) != 0):
                    self.state = 413
                    self.classOrInterfaceModifier()
                    self.state = 418
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 419
                self.classDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def methodParameters(self):
            return self.getTypedRuleContext(JavaGrammarParser.MethodParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaGrammarParser.MethodBodyContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclaration" ):
                return visitor.visitMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def methodDeclaration(self):

        localctx = JavaGrammarParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 422
                self.classOrInterfaceModifier()
                self.state = 425 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1340030844936) != 0)):
                    break

            self.state = 427
            self.typeTypeOrVoid()
            self.state = 428
            self.identifier()
            self.state = 429
            self.methodParameters()
            self.state = 430
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def methodParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.MethodParameterContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.MethodParameterContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_methodParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodParameters" ):
                listener.enterMethodParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodParameters" ):
                listener.exitMethodParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodParameters" ):
                return visitor.visitMethodParameters(self)
            else:
                return visitor.visitChildren(self)




    def methodParameters(self):

        localctx = JavaGrammarParser.MethodParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_methodParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(JavaGrammarParser.LPAREN)
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -288511833864533979) != 0) or _la==131:
                self.state = 433
                self.methodParameter()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 439
            self.match(JavaGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.LBRACK)
            else:
                return self.getToken(JavaGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.RBRACK)
            else:
                return self.getToken(JavaGrammarParser.RBRACK, i)

        def COMMA(self):
            return self.getToken(JavaGrammarParser.COMMA, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_methodParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodParameter" ):
                listener.enterMethodParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodParameter" ):
                listener.exitMethodParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodParameter" ):
                return visitor.visitMethodParameter(self)
            else:
                return visitor.visitChildren(self)




    def methodParameter(self):

        localctx = JavaGrammarParser.MethodParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_methodParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.typeType()
            self.state = 442
            self.identifier()
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 443
                self.match(JavaGrammarParser.LBRACK)
                self.state = 444
                self.match(JavaGrammarParser.RBRACK)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 450
                self.match(JavaGrammarParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaGrammarParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodBody" ):
                return visitor.visitMethodBody(self)
            else:
                return visitor.visitChildren(self)




    def methodBody(self):

        localctx = JavaGrammarParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_methodBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 453
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeOrVoidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(JavaGrammarParser.VOID, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_typeTypeOrVoid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTypeOrVoid" ):
                listener.enterTypeTypeOrVoid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTypeOrVoid" ):
                listener.exitTypeTypeOrVoid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTypeOrVoid" ):
                return visitor.visitTypeTypeOrVoid(self)
            else:
                return visitor.visitChildren(self)




    def typeTypeOrVoid(self):

        localctx = JavaGrammarParser.TypeTypeOrVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_typeTypeOrVoid)
        try:
            self.state = 458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 16, 22, 29, 31, 39, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 456
                self.typeType()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 2)
                self.state = 457
                self.match(JavaGrammarParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeParametersContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_genericMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMethodDeclaration" ):
                listener.enterGenericMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMethodDeclaration" ):
                listener.exitGenericMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericMethodDeclaration" ):
                return visitor.visitGenericMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericMethodDeclaration(self):

        localctx = JavaGrammarParser.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.typeParameters()
            self.state = 461
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeParametersContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_genericConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericConstructorDeclaration" ):
                listener.enterGenericConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericConstructorDeclaration" ):
                listener.exitGenericConstructorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericConstructorDeclaration" ):
                return visitor.visitGenericConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericConstructorDeclaration(self):

        localctx = JavaGrammarParser.GenericConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_genericConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.typeParameters()
            self.state = 464
            self.constructorDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def PUBLIC(self):
            return self.getToken(JavaGrammarParser.PUBLIC, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def methodParameters(self):
            return self.getTypedRuleContext(JavaGrammarParser.MethodParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaGrammarParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDeclaration" ):
                return visitor.visitConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constructorDeclaration(self):

        localctx = JavaGrammarParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(JavaGrammarParser.PUBLIC)
            self.state = 467
            self.identifier()
            self.state = 468
            self.methodParameters()
            self.state = 469
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaGrammarParser.BlockContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_compactConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactConstructorDeclaration" ):
                listener.enterCompactConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactConstructorDeclaration" ):
                listener.exitCompactConstructorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompactConstructorDeclaration" ):
                return visitor.visitCompactConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def compactConstructorDeclaration(self):

        localctx = JavaGrammarParser.CompactConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_compactConstructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2552211302252552) != 0):
                self.state = 471
                self.modifier()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 477
            self.identifier()
            self.state = 478
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaGrammarParser.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(JavaGrammarParser.SEMI, 0)

        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclaration" ):
                return visitor.visitFieldDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclaration(self):

        localctx = JavaGrammarParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_fieldDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1340030844936) != 0):
                self.state = 480
                self.classOrInterfaceModifier()
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 486
            self.typeType()
            self.state = 487
            self.variableDeclarators()
            self.state = 488
            self.match(JavaGrammarParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.InterfaceMemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaGrammarParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_interfaceBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBodyDeclaration" ):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBodyDeclaration" ):
                listener.exitInterfaceBodyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceBodyDeclaration" ):
                return visitor.visitInterfaceBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceBodyDeclaration(self):

        localctx = JavaGrammarParser.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 7, 10, 11, 14, 16, 18, 20, 22, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 44, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 92, 126, 131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 490
                        self.modifier() 
                    self.state = 495
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                self.state = 496
                self.interfaceMemberDeclaration()
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 497
                self.match(JavaGrammarParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.RecordDeclarationContext,0)


        def constDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.ConstDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.InterfaceMethodDeclarationContext,0)


        def genericInterfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.GenericInterfaceMethodDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMemberDeclaration" ):
                return visitor.visitInterfaceMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMemberDeclaration(self):

        localctx = JavaGrammarParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 500
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 501
                self.constDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 502
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 503
                self.genericInterfaceMethodDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 504
                self.interfaceDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 505
                self.annotationTypeDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 506
                self.classDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 507
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def constantDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ConstantDeclaratorContext,i)


        def SEMI(self):
            return self.getToken(JavaGrammarParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclaration" ):
                return visitor.visitConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constDeclaration(self):

        localctx = JavaGrammarParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_constDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.typeType()
            self.state = 511
            self.constantDeclarator()
            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 512
                self.match(JavaGrammarParser.COMMA)
                self.state = 513
                self.constantDeclarator()
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 519
            self.match(JavaGrammarParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaGrammarParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaGrammarParser.VariableInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.LBRACK)
            else:
                return self.getToken(JavaGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.RBRACK)
            else:
                return self.getToken(JavaGrammarParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_constantDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclarator" ):
                listener.enterConstantDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclarator" ):
                listener.exitConstantDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDeclarator" ):
                return visitor.visitConstantDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def constantDeclarator(self):

        localctx = JavaGrammarParser.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_constantDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.identifier()
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 522
                self.match(JavaGrammarParser.LBRACK)
                self.state = 523
                self.match(JavaGrammarParser.RBRACK)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 529
            self.match(JavaGrammarParser.ASSIGN)
            self.state = 530
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMethodDeclaration" ):
                return visitor.visitInterfaceMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMethodDeclaration(self):

        localctx = JavaGrammarParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_interfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 532
                    self.interfaceMethodModifier() 
                self.state = 537
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 538
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaGrammarParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaGrammarParser.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(JavaGrammarParser.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(JavaGrammarParser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(JavaGrammarParser.STRICTFP, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_interfaceMethodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodModifier" ):
                listener.enterInterfaceMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodModifier" ):
                listener.exitInterfaceMethodModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMethodModifier" ):
                return visitor.visitInterfaceMethodModifier(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMethodModifier(self):

        localctx = JavaGrammarParser.InterfaceMethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_interfaceMethodModifier)
        try:
            self.state = 546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 126, 131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self.annotation()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 541
                self.match(JavaGrammarParser.PUBLIC)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 542
                self.match(JavaGrammarParser.ABSTRACT)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 543
                self.match(JavaGrammarParser.DEFAULT)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 5)
                self.state = 544
                self.match(JavaGrammarParser.STATIC)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 6)
                self.state = 545
                self.match(JavaGrammarParser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericInterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeParametersContext,0)


        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_genericInterfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericInterfaceMethodDeclaration" ):
                listener.enterGenericInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericInterfaceMethodDeclaration" ):
                listener.exitGenericInterfaceMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericInterfaceMethodDeclaration" ):
                return visitor.visitGenericInterfaceMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericInterfaceMethodDeclaration(self):

        localctx = JavaGrammarParser.GenericInterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_genericInterfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9214368273573888008) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611686018427387935) != 0) or _la==131:
                self.state = 548
                self.interfaceMethodModifier()
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 554
            self.typeParameters()
            self.state = 555
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceCommonBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaGrammarParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaGrammarParser.MethodBodyContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.LBRACK)
            else:
                return self.getToken(JavaGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.RBRACK)
            else:
                return self.getToken(JavaGrammarParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaGrammarParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaGrammarParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_interfaceCommonBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceCommonBodyDeclaration" ):
                listener.enterInterfaceCommonBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceCommonBodyDeclaration" ):
                listener.exitInterfaceCommonBodyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceCommonBodyDeclaration" ):
                return visitor.visitInterfaceCommonBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceCommonBodyDeclaration(self):

        localctx = JavaGrammarParser.InterfaceCommonBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_interfaceCommonBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 557
                    self.annotation() 
                self.state = 562
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

            self.state = 563
            self.typeTypeOrVoid()
            self.state = 564
            self.identifier()
            self.state = 565
            self.formalParameters()
            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 566
                self.match(JavaGrammarParser.LBRACK)
                self.state = 567
                self.match(JavaGrammarParser.RBRACK)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 573
                self.match(JavaGrammarParser.THROWS)
                self.state = 574
                self.qualifiedNameList()


            self.state = 577
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarators" ):
                return visitor.visitVariableDeclarators(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarators(self):

        localctx = JavaGrammarParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.variableDeclarator()
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 580
                self.match(JavaGrammarParser.COMMA)
                self.state = 581
                self.variableDeclarator()
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaGrammarParser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JavaGrammarParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaGrammarParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarator" ):
                return visitor.visitVariableDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarator(self):

        localctx = JavaGrammarParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.variableDeclaratorId()
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 588
                self.match(JavaGrammarParser.ASSIGN)
                self.state = 589
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.LBRACK)
            else:
                return self.getToken(JavaGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.RBRACK)
            else:
                return self.getToken(JavaGrammarParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaratorId" ):
                return visitor.visitVariableDeclaratorId(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaratorId(self):

        localctx = JavaGrammarParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.identifier()
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 593
                self.match(JavaGrammarParser.LBRACK)
                self.state = 594
                self.match(JavaGrammarParser.RBRACK)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaGrammarParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableInitializer" ):
                return visitor.visitVariableInitializer(self)
            else:
                return visitor.visitChildren(self)




    def variableInitializer(self):

        localctx = JavaGrammarParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_variableInitializer)
        try:
            self.state = 602
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 600
                self.arrayInitializer()
                pass
            elif token in [5, 7, 10, 16, 22, 29, 31, 33, 39, 42, 43, 45, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 94, 103, 104, 105, 106, 126, 131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaGrammarParser.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayInitializer" ):
                return visitor.visitArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def arrayInitializer(self):

        localctx = JavaGrammarParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(JavaGrammarParser.LBRACE)
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -288475137395521499) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 2377900732130013183) != 0):
                self.state = 605
                self.variableInitializer()
                self.state = 610
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 606
                        self.match(JavaGrammarParser.COMMA)
                        self.state = 607
                        self.variableInitializer() 
                    self.state = 612
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88:
                    self.state = 613
                    self.match(JavaGrammarParser.COMMA)




            self.state = 618
            self.match(JavaGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeIdentifierContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.DOT)
            else:
                return self.getToken(JavaGrammarParser.DOT, i)

        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.TypeArgumentsContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassOrInterfaceType" ):
                return visitor.visitClassOrInterfaceType(self)
            else:
                return visitor.visitChildren(self)




    def classOrInterfaceType(self):

        localctx = JavaGrammarParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_classOrInterfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 620
                    self.identifier()
                    self.state = 622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==92:
                        self.state = 621
                        self.typeArguments()


                    self.state = 624
                    self.match(JavaGrammarParser.DOT) 
                self.state = 630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

            self.state = 631
            self.typeIdentifier()
            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 632
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def QUESTION(self):
            return self.getToken(JavaGrammarParser.QUESTION, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaGrammarParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(JavaGrammarParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgument" ):
                return visitor.visitTypeArgument(self)
            else:
                return visitor.visitChildren(self)




    def typeArgument(self):

        localctx = JavaGrammarParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 635
                self.typeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64511) != 0) or _la==126 or _la==131:
                    self.state = 636
                    self.annotation()
                    self.state = 641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 642
                self.match(JavaGrammarParser.QUESTION)
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19 or _la==42:
                    self.state = 643
                    _la = self._input.LA(1)
                    if not(_la==19 or _la==42):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 644
                    self.typeType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = JavaGrammarParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.qualifiedName()
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 650
                self.match(JavaGrammarParser.COMMA)
                self.state = 651
                self.qualifiedName()
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def receiverParameter(self):
            return self.getTypedRuleContext(JavaGrammarParser.ReceiverParameterContext,0)


        def COMMA(self):
            return self.getToken(JavaGrammarParser.COMMA, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaGrammarParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameters" ):
                return visitor.visitFormalParameters(self)
            else:
                return visitor.visitChildren(self)




    def formalParameters(self):

        localctx = JavaGrammarParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(JavaGrammarParser.LPAREN)
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -288511833864533979) != 0) or _la==131:
                    self.state = 658
                    self.receiverParameter()


                pass

            elif la_ == 2:
                self.state = 661
                self.receiverParameter()
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88:
                    self.state = 662
                    self.match(JavaGrammarParser.COMMA)
                    self.state = 663
                    self.formalParameterList()


                pass

            elif la_ == 3:
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -288511833864501211) != 0) or _la==126 or _la==131:
                    self.state = 666
                    self.formalParameterList()


                pass


            self.state = 671
            self.match(JavaGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def THIS(self):
            return self.getToken(JavaGrammarParser.THIS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.DOT)
            else:
                return self.getToken(JavaGrammarParser.DOT, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_receiverParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverParameter" ):
                listener.enterReceiverParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverParameter" ):
                listener.exitReceiverParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiverParameter" ):
                return visitor.visitReceiverParameter(self)
            else:
                return visitor.visitChildren(self)




    def receiverParameter(self):

        localctx = JavaGrammarParser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_receiverParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.typeType()
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64511) != 0) or _la==131:
                self.state = 674
                self.identifier()
                self.state = 675
                self.match(JavaGrammarParser.DOT)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 682
            self.match(JavaGrammarParser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(JavaGrammarParser.LastFormalParameterContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterList" ):
                return visitor.visitFormalParameterList(self)
            else:
                return visitor.visitChildren(self)




    def formalParameterList(self):

        localctx = JavaGrammarParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 684
                self.formalParameter()
                self.state = 689
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 685
                        self.match(JavaGrammarParser.COMMA)
                        self.state = 686
                        self.formalParameter() 
                    self.state = 691
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88:
                    self.state = 692
                    self.match(JavaGrammarParser.COMMA)
                    self.state = 693
                    self.lastFormalParameter()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaGrammarParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameter" ):
                return visitor.visitFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def formalParameter(self):

        localctx = JavaGrammarParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 699
                    self.variableModifier() 
                self.state = 704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

            self.state = 705
            self.typeType()
            self.state = 706
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(JavaGrammarParser.ELLIPSIS, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaGrammarParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastFormalParameter" ):
                return visitor.visitLastFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def lastFormalParameter(self):

        localctx = JavaGrammarParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_lastFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 708
                    self.variableModifier() 
                self.state = 713
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 714
            self.typeType()
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64511) != 0) or _la==126 or _la==131:
                self.state = 715
                self.annotation()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 721
            self.match(JavaGrammarParser.ELLIPSIS)
            self.state = 722
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLVTIParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.LambdaLVTIParameterContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.LambdaLVTIParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_lambdaLVTIList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIList" ):
                listener.enterLambdaLVTIList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIList" ):
                listener.exitLambdaLVTIList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaLVTIList" ):
                return visitor.visitLambdaLVTIList(self)
            else:
                return visitor.visitChildren(self)




    def lambdaLVTIList(self):

        localctx = JavaGrammarParser.LambdaLVTIListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_lambdaLVTIList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.lambdaLVTIParameter()
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 725
                self.match(JavaGrammarParser.COMMA)
                self.state = 726
                self.lambdaLVTIParameter()
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaGrammarParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_lambdaLVTIParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIParameter" ):
                listener.enterLambdaLVTIParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIParameter" ):
                listener.exitLambdaLVTIParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaLVTIParameter" ):
                return visitor.visitLambdaLVTIParameter(self)
            else:
                return visitor.visitChildren(self)




    def lambdaLVTIParameter(self):

        localctx = JavaGrammarParser.LambdaLVTIParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lambdaLVTIParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 732
                    self.variableModifier() 
                self.state = 737
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

            self.state = 738
            self.match(JavaGrammarParser.VAR)
            self.state = 739
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.DOT)
            else:
                return self.getToken(JavaGrammarParser.DOT, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = JavaGrammarParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_qualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.identifier()
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==89:
                self.state = 742
                self.match(JavaGrammarParser.DOT)
                self.state = 743
                self.identifier()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(JavaGrammarParser.IntegerLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(JavaGrammarParser.FloatLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(JavaGrammarParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(JavaGrammarParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(JavaGrammarParser.BOOL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(JavaGrammarParser.NULL_LITERAL, 0)

        def TEXT_BLOCK(self):
            return self.getToken(JavaGrammarParser.TEXT_BLOCK, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = JavaGrammarParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_literal)
        try:
            self.state = 756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70, 71, 72, 73]:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.integerLiteral()
                pass
            elif token in [74, 75]:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.floatLiteral()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 3)
                self.state = 751
                self.match(JavaGrammarParser.CHAR_LITERAL)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 4)
                self.state = 752
                self.match(JavaGrammarParser.STRING_LITERAL)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 5)
                self.state = 753
                self.match(JavaGrammarParser.BOOL_LITERAL)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 6)
                self.state = 754
                self.match(JavaGrammarParser.NULL_LITERAL)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 7)
                self.state = 755
                self.match(JavaGrammarParser.TEXT_BLOCK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(JavaGrammarParser.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(JavaGrammarParser.HEX_LITERAL, 0)

        def OCT_LITERAL(self):
            return self.getToken(JavaGrammarParser.OCT_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(JavaGrammarParser.BINARY_LITERAL, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = JavaGrammarParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JavaGrammarParser.FLOAT_LITERAL, 0)

        def HEX_FLOAT_LITERAL(self):
            return self.getToken(JavaGrammarParser.HEX_FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatLiteral(self):

        localctx = JavaGrammarParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            _la = self._input.LA(1)
            if not(_la==74 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltAnnotationQualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaGrammarParser.AT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.DOT)
            else:
                return self.getToken(JavaGrammarParser.DOT, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_altAnnotationQualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltAnnotationQualifiedName" ):
                listener.enterAltAnnotationQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltAnnotationQualifiedName" ):
                listener.exitAltAnnotationQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAltAnnotationQualifiedName" ):
                return visitor.visitAltAnnotationQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def altAnnotationQualifiedName(self):

        localctx = JavaGrammarParser.AltAnnotationQualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_altAnnotationQualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64511) != 0) or _la==131:
                self.state = 762
                self.identifier()
                self.state = 763
                self.match(JavaGrammarParser.DOT)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 770
            self.match(JavaGrammarParser.AT)
            self.state = 771
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaGrammarParser.AT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaGrammarParser.QualifiedNameContext,0)


        def altAnnotationQualifiedName(self):
            return self.getTypedRuleContext(JavaGrammarParser.AltAnnotationQualifiedNameContext,0)


        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def elementValuePairs(self):
            return self.getTypedRuleContext(JavaGrammarParser.ElementValuePairsContext,0)


        def elementValue(self):
            return self.getTypedRuleContext(JavaGrammarParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = JavaGrammarParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 773
                self.match(JavaGrammarParser.AT)
                self.state = 774
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.state = 775
                self.altAnnotationQualifiedName()
                pass


            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 778
                self.match(JavaGrammarParser.LPAREN)
                self.state = 781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 779
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 780
                    self.elementValue()


                self.state = 783
                self.match(JavaGrammarParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePairs" ):
                return visitor.visitElementValuePairs(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePairs(self):

        localctx = JavaGrammarParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.elementValuePair()
            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 787
                self.match(JavaGrammarParser.COMMA)
                self.state = 788
                self.elementValuePair()
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaGrammarParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaGrammarParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePair" ):
                return visitor.visitElementValuePair(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePair(self):

        localctx = JavaGrammarParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.identifier()
            self.state = 795
            self.match(JavaGrammarParser.ASSIGN)
            self.state = 796
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JavaGrammarParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValue" ):
                return visitor.visitElementValue(self)
            else:
                return visitor.visitChildren(self)




    def elementValue(self):

        localctx = JavaGrammarParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_elementValue)
        try:
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 798
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 799
                self.annotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 800
                self.elementValueArrayInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaGrammarParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValueArrayInitializer" ):
                return visitor.visitElementValueArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def elementValueArrayInitializer(self):

        localctx = JavaGrammarParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(JavaGrammarParser.LBRACE)
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -288475137395521499) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 2377900732130013183) != 0):
                self.state = 804
                self.elementValue()
                self.state = 809
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 805
                        self.match(JavaGrammarParser.COMMA)
                        self.state = 806
                        self.elementValue() 
                    self.state = 811
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,83,self._ctx)



            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 814
                self.match(JavaGrammarParser.COMMA)


            self.state = 817
            self.match(JavaGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaGrammarParser.AT, 0)

        def INTERFACE(self):
            return self.getToken(JavaGrammarParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def annotationTypeBody(self):
            return self.getTypedRuleContext(JavaGrammarParser.AnnotationTypeBodyContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_annotationTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeDeclaration" ):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeDeclaration" ):
                listener.exitAnnotationTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeDeclaration" ):
                return visitor.visitAnnotationTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeDeclaration(self):

        localctx = JavaGrammarParser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(JavaGrammarParser.AT)
            self.state = 820
            self.match(JavaGrammarParser.INTERFACE)
            self.state = 821
            self.identifier()
            self.state = 822
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaGrammarParser.RBRACE, 0)

        def annotationTypeElementDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.AnnotationTypeElementDeclarationContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_annotationTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeBody" ):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeBody" ):
                listener.exitAnnotationTypeBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeBody" ):
                return visitor.visitAnnotationTypeBody(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeBody(self):

        localctx = JavaGrammarParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(JavaGrammarParser.LBRACE)
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9216917602420722856) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611686018435776543) != 0) or _la==131:
                self.state = 825
                self.annotationTypeElementDeclaration()
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 831
            self.match(JavaGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(JavaGrammarParser.AnnotationTypeElementRestContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaGrammarParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementDeclaration" ):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementDeclaration" ):
                listener.exitAnnotationTypeElementDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementDeclaration" ):
                return visitor.visitAnnotationTypeElementDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeElementDeclaration(self):

        localctx = JavaGrammarParser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_annotationTypeElementDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 7, 10, 11, 16, 18, 20, 22, 29, 30, 31, 32, 35, 36, 37, 39, 40, 44, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 126, 131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2552211302252552) != 0):
                    self.state = 833
                    self.modifier()
                    self.state = 838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 839
                self.annotationTypeElementRest()
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 840
                self.match(JavaGrammarParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def annotationMethodOrConstantRest(self):
            return self.getTypedRuleContext(JavaGrammarParser.AnnotationMethodOrConstantRestContext,0)


        def SEMI(self):
            return self.getToken(JavaGrammarParser.SEMI, 0)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.InterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.EnumDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.RecordDeclarationContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_annotationTypeElementRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest" ):
                listener.enterAnnotationTypeElementRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest" ):
                listener.exitAnnotationTypeElementRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementRest" ):
                return visitor.visitAnnotationTypeElementRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeElementRest(self):

        localctx = JavaGrammarParser.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotationTypeElementRest)
        try:
            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 843
                self.typeType()
                self.state = 844
                self.annotationMethodOrConstantRest()
                self.state = 845
                self.match(JavaGrammarParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 847
                self.classDeclaration()
                self.state = 849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 848
                    self.match(JavaGrammarParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 851
                self.interfaceDeclaration()
                self.state = 853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 852
                    self.match(JavaGrammarParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 855
                self.enumDeclaration()
                self.state = 857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 856
                    self.match(JavaGrammarParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 859
                self.annotationTypeDeclaration()
                self.state = 861
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 860
                    self.match(JavaGrammarParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 863
                self.recordDeclaration()
                self.state = 865
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 864
                    self.match(JavaGrammarParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodOrConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationMethodRest(self):
            return self.getTypedRuleContext(JavaGrammarParser.AnnotationMethodRestContext,0)


        def annotationConstantRest(self):
            return self.getTypedRuleContext(JavaGrammarParser.AnnotationConstantRestContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_annotationMethodOrConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodOrConstantRest" ):
                listener.enterAnnotationMethodOrConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodOrConstantRest" ):
                listener.exitAnnotationMethodOrConstantRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationMethodOrConstantRest" ):
                return visitor.visitAnnotationMethodOrConstantRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationMethodOrConstantRest(self):

        localctx = JavaGrammarParser.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(JavaGrammarParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_annotationMethodRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodRest" ):
                listener.enterAnnotationMethodRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodRest" ):
                listener.exitAnnotationMethodRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationMethodRest" ):
                return visitor.visitAnnotationMethodRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationMethodRest(self):

        localctx = JavaGrammarParser.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_annotationMethodRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.identifier()
            self.state = 874
            self.match(JavaGrammarParser.LPAREN)
            self.state = 875
            self.match(JavaGrammarParser.RPAREN)
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 876
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaGrammarParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_annotationConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationConstantRest" ):
                listener.enterAnnotationConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationConstantRest" ):
                listener.exitAnnotationConstantRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationConstantRest" ):
                return visitor.visitAnnotationConstantRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationConstantRest(self):

        localctx = JavaGrammarParser.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(JavaGrammarParser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaGrammarParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = JavaGrammarParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(JavaGrammarParser.DEFAULT)
            self.state = 882
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(JavaGrammarParser.MODULE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaGrammarParser.QualifiedNameContext,0)


        def moduleBody(self):
            return self.getTypedRuleContext(JavaGrammarParser.ModuleBodyContext,0)


        def OPEN(self):
            return self.getToken(JavaGrammarParser.OPEN, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_moduleDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclaration" ):
                listener.enterModuleDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclaration" ):
                listener.exitModuleDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleDeclaration" ):
                return visitor.visitModuleDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def moduleDeclaration(self):

        localctx = JavaGrammarParser.ModuleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_moduleDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 884
                self.match(JavaGrammarParser.OPEN)


            self.state = 887
            self.match(JavaGrammarParser.MODULE)
            self.state = 888
            self.qualifiedName()
            self.state = 889
            self.moduleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaGrammarParser.RBRACE, 0)

        def moduleDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ModuleDirectiveContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ModuleDirectiveContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_moduleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBody" ):
                listener.enterModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBody" ):
                listener.exitModuleBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleBody" ):
                return visitor.visitModuleBody(self)
            else:
                return visitor.visitChildren(self)




    def moduleBody(self):

        localctx = JavaGrammarParser.ModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_moduleBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(JavaGrammarParser.LBRACE)
            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1981583836043018240) != 0):
                self.state = 892
                self.moduleDirective()
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 898
            self.match(JavaGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRES(self):
            return self.getToken(JavaGrammarParser.REQUIRES, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.QualifiedNameContext,i)


        def SEMI(self):
            return self.getToken(JavaGrammarParser.SEMI, 0)

        def requiresModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.RequiresModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.RequiresModifierContext,i)


        def EXPORTS(self):
            return self.getToken(JavaGrammarParser.EXPORTS, 0)

        def TO(self):
            return self.getToken(JavaGrammarParser.TO, 0)

        def OPENS(self):
            return self.getToken(JavaGrammarParser.OPENS, 0)

        def USES(self):
            return self.getToken(JavaGrammarParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaGrammarParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaGrammarParser.WITH, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_moduleDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDirective" ):
                listener.enterModuleDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDirective" ):
                listener.exitModuleDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleDirective" ):
                return visitor.visitModuleDirective(self)
            else:
                return visitor.visitChildren(self)




    def moduleDirective(self):

        localctx = JavaGrammarParser.ModuleDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_moduleDirective)
        self._la = 0 # Token type
        try:
            self.state = 936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.match(JavaGrammarParser.REQUIRES)
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 901
                        self.requiresModifier() 
                    self.state = 906
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                self.state = 907
                self.qualifiedName()
                self.state = 908
                self.match(JavaGrammarParser.SEMI)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.match(JavaGrammarParser.EXPORTS)
                self.state = 911
                self.qualifiedName()
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 912
                    self.match(JavaGrammarParser.TO)
                    self.state = 913
                    self.qualifiedName()


                self.state = 916
                self.match(JavaGrammarParser.SEMI)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 918
                self.match(JavaGrammarParser.OPENS)
                self.state = 919
                self.qualifiedName()
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 920
                    self.match(JavaGrammarParser.TO)
                    self.state = 921
                    self.qualifiedName()


                self.state = 924
                self.match(JavaGrammarParser.SEMI)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 4)
                self.state = 926
                self.match(JavaGrammarParser.USES)
                self.state = 927
                self.qualifiedName()
                self.state = 928
                self.match(JavaGrammarParser.SEMI)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 5)
                self.state = 930
                self.match(JavaGrammarParser.PROVIDES)
                self.state = 931
                self.qualifiedName()
                self.state = 932
                self.match(JavaGrammarParser.WITH)
                self.state = 933
                self.qualifiedName()
                self.state = 934
                self.match(JavaGrammarParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiresModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSITIVE(self):
            return self.getToken(JavaGrammarParser.TRANSITIVE, 0)

        def STATIC(self):
            return self.getToken(JavaGrammarParser.STATIC, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_requiresModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiresModifier" ):
                listener.enterRequiresModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiresModifier" ):
                listener.exitRequiresModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequiresModifier" ):
                return visitor.visitRequiresModifier(self)
            else:
                return visitor.visitChildren(self)




    def requiresModifier(self):

        localctx = JavaGrammarParser.RequiresModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_requiresModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            _la = self._input.LA(1)
            if not(_la==40 or _la==62):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(JavaGrammarParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def recordHeader(self):
            return self.getTypedRuleContext(JavaGrammarParser.RecordHeaderContext,0)


        def recordBody(self):
            return self.getTypedRuleContext(JavaGrammarParser.RecordBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeParametersContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaGrammarParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_recordDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordDeclaration" ):
                listener.enterRecordDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordDeclaration" ):
                listener.exitRecordDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordDeclaration" ):
                return visitor.visitRecordDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def recordDeclaration(self):

        localctx = JavaGrammarParser.RecordDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_recordDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(JavaGrammarParser.RECORD)
            self.state = 941
            self.identifier()
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 942
                self.typeParameters()


            self.state = 945
            self.recordHeader()
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 946
                self.match(JavaGrammarParser.IMPLEMENTS)
                self.state = 947
                self.typeList()


            self.state = 950
            self.recordBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def recordComponentList(self):
            return self.getTypedRuleContext(JavaGrammarParser.RecordComponentListContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_recordHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordHeader" ):
                listener.enterRecordHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordHeader" ):
                listener.exitRecordHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordHeader" ):
                return visitor.visitRecordHeader(self)
            else:
                return visitor.visitChildren(self)




    def recordHeader(self):

        localctx = JavaGrammarParser.RecordHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_recordHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.match(JavaGrammarParser.LPAREN)
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -288511833864533979) != 0) or _la==131:
                self.state = 953
                self.recordComponentList()


            self.state = 956
            self.match(JavaGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.RecordComponentContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.RecordComponentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_recordComponentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponentList" ):
                listener.enterRecordComponentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponentList" ):
                listener.exitRecordComponentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordComponentList" ):
                return visitor.visitRecordComponentList(self)
            else:
                return visitor.visitChildren(self)




    def recordComponentList(self):

        localctx = JavaGrammarParser.RecordComponentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_recordComponentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.recordComponent()
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 959
                self.match(JavaGrammarParser.COMMA)
                self.state = 960
                self.recordComponent()
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_recordComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponent" ):
                listener.enterRecordComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponent" ):
                listener.exitRecordComponent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordComponent" ):
                return visitor.visitRecordComponent(self)
            else:
                return visitor.visitChildren(self)




    def recordComponent(self):

        localctx = JavaGrammarParser.RecordComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_recordComponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.typeType()
            self.state = 967
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaGrammarParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ClassBodyDeclarationContext,i)


        def compactConstructorDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.CompactConstructorDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.CompactConstructorDeclarationContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_recordBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordBody" ):
                listener.enterRecordBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordBody" ):
                listener.exitRecordBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordBody" ):
                return visitor.visitRecordBody(self)
            else:
                return visitor.visitChildren(self)




    def recordBody(self):

        localctx = JavaGrammarParser.RecordBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_recordBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(JavaGrammarParser.LBRACE)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9216917601346718888) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8388639) != 0) or _la==131:
                self.state = 972
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 970
                    self.classBodyDeclaration()
                    pass

                elif la_ == 2:
                    self.state = 971
                    self.compactConstructorDeclaration()
                    pass


                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 977
            self.match(JavaGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaGrammarParser.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = JavaGrammarParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(JavaGrammarParser.LBRACE)
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2676233283195656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611694266652819423) != 0) or _la==131:
                self.state = 980
                self.blockStatement()
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 986
            self.match(JavaGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(JavaGrammarParser.SEMI, 0)

        def localTypeDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.LocalTypeDeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(JavaGrammarParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = JavaGrammarParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_blockStatement)
        try:
            self.state = 993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self.localVariableDeclaration()
                self.state = 989
                self.match(JavaGrammarParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.localTypeDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 992
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaGrammarParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclaration" ):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclaration(self):

        localctx = JavaGrammarParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.typeType()
            self.state = 996
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaGrammarParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaGrammarParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaGrammarParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaGrammarParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaGrammarParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaGrammarParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaGrammarParser.TO, 0)

        def USES(self):
            return self.getToken(JavaGrammarParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaGrammarParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaGrammarParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaGrammarParser.TRANSITIVE, 0)

        def YIELD(self):
            return self.getToken(JavaGrammarParser.YIELD, 0)

        def SEALED(self):
            return self.getToken(JavaGrammarParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaGrammarParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaGrammarParser.RECORD, 0)

        def VAR(self):
            return self.getToken(JavaGrammarParser.VAR, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = JavaGrammarParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64511) != 0) or _la==131):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaGrammarParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaGrammarParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaGrammarParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaGrammarParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaGrammarParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaGrammarParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaGrammarParser.TO, 0)

        def USES(self):
            return self.getToken(JavaGrammarParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaGrammarParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaGrammarParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaGrammarParser.TRANSITIVE, 0)

        def SEALED(self):
            return self.getToken(JavaGrammarParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaGrammarParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaGrammarParser.RECORD, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_typeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeIdentifier" ):
                return visitor.visitTypeIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def typeIdentifier(self):

        localctx = JavaGrammarParser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_typeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 58367) != 0) or _la==131):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.InterfaceDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaGrammarParser.RecordDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_localTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalTypeDeclaration" ):
                listener.enterLocalTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalTypeDeclaration" ):
                listener.exitLocalTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalTypeDeclaration" ):
                return visitor.visitLocalTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localTypeDeclaration(self):

        localctx = JavaGrammarParser.LocalTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_localTypeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1340030844936) != 0):
                self.state = 1002
                self.classOrInterfaceModifier()
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.state = 1008
                self.classDeclaration()
                pass
            elif token in [30]:
                self.state = 1009
                self.interfaceDeclaration()
                pass
            elif token in [66]:
                self.state = 1010
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blockLabel = None # BlockContext
            self.statementExpression = None # ExpressionContext
            self.identifierLabel = None # IdentifierContext

        def block(self):
            return self.getTypedRuleContext(JavaGrammarParser.BlockContext,0)


        def ASSERT(self):
            return self.getToken(JavaGrammarParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(JavaGrammarParser.SEMI, 0)

        def COLON(self):
            return self.getToken(JavaGrammarParser.COLON, 0)

        def IF(self):
            return self.getToken(JavaGrammarParser.IF, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ParExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(JavaGrammarParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JavaGrammarParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def forControl(self):
            return self.getTypedRuleContext(JavaGrammarParser.ForControlContext,0)


        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def WHILE(self):
            return self.getToken(JavaGrammarParser.WHILE, 0)

        def DO(self):
            return self.getToken(JavaGrammarParser.DO, 0)

        def TRY(self):
            return self.getToken(JavaGrammarParser.TRY, 0)

        def finallyBlock(self):
            return self.getTypedRuleContext(JavaGrammarParser.FinallyBlockContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.CatchClauseContext,i)


        def resourceSpecification(self):
            return self.getTypedRuleContext(JavaGrammarParser.ResourceSpecificationContext,0)


        def SWITCH(self):
            return self.getToken(JavaGrammarParser.SWITCH, 0)

        def LBRACE(self):
            return self.getToken(JavaGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaGrammarParser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.SwitchLabelContext,i)


        def SYNCHRONIZED(self):
            return self.getToken(JavaGrammarParser.SYNCHRONIZED, 0)

        def RETURN(self):
            return self.getToken(JavaGrammarParser.RETURN, 0)

        def THROW(self):
            return self.getToken(JavaGrammarParser.THROW, 0)

        def BREAK(self):
            return self.getToken(JavaGrammarParser.BREAK, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(JavaGrammarParser.CONTINUE, 0)

        def YIELD(self):
            return self.getToken(JavaGrammarParser.YIELD, 0)

        def switchExpression(self):
            return self.getTypedRuleContext(JavaGrammarParser.SwitchExpressionContext,0)


        def PRINT(self):
            return self.getToken(JavaGrammarParser.PRINT, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = JavaGrammarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1013
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1014
                self.match(JavaGrammarParser.ASSERT)
                self.state = 1015
                self.expression(0)
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 1016
                    self.match(JavaGrammarParser.COLON)
                    self.state = 1017
                    self.expression(0)


                self.state = 1020
                self.match(JavaGrammarParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1022
                self.match(JavaGrammarParser.IF)
                self.state = 1023
                self.parExpression()
                self.state = 1024
                self.statement()
                self.state = 1027
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 1025
                    self.match(JavaGrammarParser.ELSE)
                    self.state = 1026
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1029
                self.match(JavaGrammarParser.FOR)
                self.state = 1030
                self.match(JavaGrammarParser.LPAREN)
                self.state = 1031
                self.forControl()
                self.state = 1032
                self.match(JavaGrammarParser.RPAREN)
                self.state = 1033
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1035
                self.match(JavaGrammarParser.WHILE)
                self.state = 1036
                self.parExpression()
                self.state = 1037
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1039
                self.match(JavaGrammarParser.DO)
                self.state = 1040
                self.statement()
                self.state = 1041
                self.match(JavaGrammarParser.WHILE)
                self.state = 1042
                self.parExpression()
                self.state = 1043
                self.match(JavaGrammarParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1045
                self.match(JavaGrammarParser.TRY)
                self.state = 1046
                self.block()
                self.state = 1056
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9]:
                    self.state = 1048 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1047
                        self.catchClause()
                        self.state = 1050 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==9):
                            break

                    self.state = 1053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 1052
                        self.finallyBlock()


                    pass
                elif token in [21]:
                    self.state = 1055
                    self.finallyBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1058
                self.match(JavaGrammarParser.TRY)
                self.state = 1059
                self.resourceSpecification()
                self.state = 1060
                self.block()
                self.state = 1064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1061
                    self.catchClause()
                    self.state = 1066
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 1067
                    self.finallyBlock()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1070
                self.match(JavaGrammarParser.SWITCH)
                self.state = 1071
                self.parExpression()
                self.state = 1072
                self.match(JavaGrammarParser.LBRACE)
                self.state = 1076
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1073
                        self.switchBlockStatementGroup() 
                    self.state = 1078
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==8 or _la==14:
                    self.state = 1079
                    self.switchLabel()
                    self.state = 1084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1085
                self.match(JavaGrammarParser.RBRACE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1087
                self.match(JavaGrammarParser.SYNCHRONIZED)
                self.state = 1088
                self.parExpression()
                self.state = 1089
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1091
                self.match(JavaGrammarParser.RETURN)
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -288475137395521499) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 2377900732130004991) != 0):
                    self.state = 1092
                    self.expression(0)


                self.state = 1095
                self.match(JavaGrammarParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1096
                self.match(JavaGrammarParser.THROW)
                self.state = 1097
                self.expression(0)
                self.state = 1098
                self.match(JavaGrammarParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1100
                self.match(JavaGrammarParser.BREAK)
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64511) != 0) or _la==131:
                    self.state = 1101
                    self.identifier()


                self.state = 1104
                self.match(JavaGrammarParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1105
                self.match(JavaGrammarParser.CONTINUE)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64511) != 0) or _la==131:
                    self.state = 1106
                    self.identifier()


                self.state = 1109
                self.match(JavaGrammarParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1110
                self.match(JavaGrammarParser.YIELD)
                self.state = 1111
                self.expression(0)
                self.state = 1112
                self.match(JavaGrammarParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1114
                self.match(JavaGrammarParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1115
                localctx.statementExpression = self.expression(0)
                self.state = 1116
                self.match(JavaGrammarParser.SEMI)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1118
                self.switchExpression()
                self.state = 1120
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1119
                    self.match(JavaGrammarParser.SEMI)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1122
                localctx.identifierLabel = self.identifier()
                self.state = 1123
                self.match(JavaGrammarParser.COLON)
                self.state = 1124
                self.statement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1126
                self.match(JavaGrammarParser.PRINT)
                self.state = 1127
                self.match(JavaGrammarParser.LPAREN)
                self.state = 1128
                self.expression(0)
                self.state = 1129
                self.match(JavaGrammarParser.T__0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(JavaGrammarParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def catchType(self):
            return self.getTypedRuleContext(JavaGrammarParser.CatchTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(JavaGrammarParser.BlockContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = JavaGrammarParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(JavaGrammarParser.CATCH)
            self.state = 1134
            self.match(JavaGrammarParser.LPAREN)
            self.state = 1138
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1135
                    self.variableModifier() 
                self.state = 1140
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

            self.state = 1141
            self.catchType()
            self.state = 1142
            self.identifier()
            self.state = 1143
            self.match(JavaGrammarParser.RPAREN)
            self.state = 1144
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.QualifiedNameContext,i)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.BITOR)
            else:
                return self.getToken(JavaGrammarParser.BITOR, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_catchType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchType" ):
                listener.enterCatchType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchType" ):
                listener.exitCatchType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchType" ):
                return visitor.visitCatchType(self)
            else:
                return visitor.visitChildren(self)




    def catchType(self):

        localctx = JavaGrammarParser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.qualifiedName()
            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==110:
                self.state = 1147
                self.match(JavaGrammarParser.BITOR)
                self.state = 1148
                self.qualifiedName()
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaGrammarParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaGrammarParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyBlock" ):
                return visitor.visitFinallyBlock(self)
            else:
                return visitor.visitChildren(self)




    def finallyBlock(self):

        localctx = JavaGrammarParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(JavaGrammarParser.FINALLY)
            self.state = 1155
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def resources(self):
            return self.getTypedRuleContext(JavaGrammarParser.ResourcesContext,0)


        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JavaGrammarParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_resourceSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceSpecification" ):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceSpecification" ):
                listener.exitResourceSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceSpecification" ):
                return visitor.visitResourceSpecification(self)
            else:
                return visitor.visitChildren(self)




    def resourceSpecification(self):

        localctx = JavaGrammarParser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(JavaGrammarParser.LPAREN)
            self.state = 1158
            self.resources()
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 1159
                self.match(JavaGrammarParser.SEMI)


            self.state = 1162
            self.match(JavaGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.SEMI)
            else:
                return self.getToken(JavaGrammarParser.SEMI, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_resources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResources" ):
                listener.enterResources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResources" ):
                listener.exitResources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResources" ):
                return visitor.visitResources(self)
            else:
                return visitor.visitChildren(self)




    def resources(self):

        localctx = JavaGrammarParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.resource()
            self.state = 1169
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1165
                    self.match(JavaGrammarParser.SEMI)
                    self.state = 1166
                    self.resource() 
                self.state = 1171
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(JavaGrammarParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassOrInterfaceTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaGrammarParser.VariableDeclaratorIdContext,0)


        def VAR(self):
            return self.getToken(JavaGrammarParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.VariableModifierContext,i)


        def qualifiedName(self):
            return self.getTypedRuleContext(JavaGrammarParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = JavaGrammarParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_resource)
        try:
            self.state = 1189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1175
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1172
                        self.variableModifier() 
                    self.state = 1177
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

                self.state = 1183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1178
                    self.classOrInterfaceType()
                    self.state = 1179
                    self.variableDeclaratorId()
                    pass

                elif la_ == 2:
                    self.state = 1181
                    self.match(JavaGrammarParser.VAR)
                    self.state = 1182
                    self.identifier()
                    pass


                self.state = 1185
                self.match(JavaGrammarParser.ASSIGN)
                self.state = 1186
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1188
                self.qualifiedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.SwitchLabelContext,i)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBlockStatementGroup" ):
                return visitor.visitSwitchBlockStatementGroup(self)
            else:
                return visitor.visitChildren(self)




    def switchBlockStatementGroup(self):

        localctx = JavaGrammarParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1191
                self.switchLabel()
                self.state = 1194 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==8 or _la==14):
                    break

            self.state = 1197 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1196
                self.blockStatement()
                self.state = 1199 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -2676233283195656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611694266652819423) != 0) or _la==131):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None # ExpressionContext
            self.enumConstantName = None # Token
            self.varName = None # IdentifierContext

        def CASE(self):
            return self.getToken(JavaGrammarParser.CASE, 0)

        def COLON(self):
            return self.getToken(JavaGrammarParser.COLON, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)


        def IDENTIFIER(self):
            return self.getToken(JavaGrammarParser.IDENTIFIER, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(JavaGrammarParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabel" ):
                return visitor.visitSwitchLabel(self)
            else:
                return visitor.visitChildren(self)




    def switchLabel(self):

        localctx = JavaGrammarParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_switchLabel)
        try:
            self.state = 1212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1201
                self.match(JavaGrammarParser.CASE)
                self.state = 1207
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1202
                    localctx.constantExpression = self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 1203
                    localctx.enumConstantName = self.match(JavaGrammarParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 1204
                    self.typeType()
                    self.state = 1205
                    localctx.varName = self.identifier()
                    pass


                self.state = 1209
                self.match(JavaGrammarParser.COLON)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1210
                self.match(JavaGrammarParser.DEFAULT)
                self.state = 1211
                self.match(JavaGrammarParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.forUpdate = None # ExpressionContext

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def variableDeclarator(self):
            return self.getTypedRuleContext(JavaGrammarParser.VariableDeclaratorContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.SEMI)
            else:
                return self.getToken(JavaGrammarParser.SEMI, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForControl" ):
                return visitor.visitForControl(self)
            else:
                return visitor.visitChildren(self)




    def forControl(self):

        localctx = JavaGrammarParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_forControl)
        try:
            self.state = 1222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 16, 22, 29, 31, 39, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1214
                self.typeType()
                self.state = 1215
                self.variableDeclarator()
                self.state = 1216
                self.match(JavaGrammarParser.SEMI)
                self.state = 1217
                self.expression(0)
                self.state = 1218
                self.match(JavaGrammarParser.SEMI)
                self.state = 1219
                localctx.forUpdate = self.expression(0)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1221
                self.match(JavaGrammarParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaGrammarParser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(JavaGrammarParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def VAR(self):
            return self.getToken(JavaGrammarParser.VAR, 0)

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnhancedForControl" ):
                return visitor.visitEnhancedForControl(self)
            else:
                return visitor.visitChildren(self)




    def enhancedForControl(self):

        localctx = JavaGrammarParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1224
                    self.variableModifier() 
                self.state = 1229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 1232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1230
                self.typeType()
                pass

            elif la_ == 2:
                self.state = 1231
                self.match(JavaGrammarParser.VAR)
                pass


            self.state = 1234
            self.variableDeclaratorId()
            self.state = 1235
            self.match(JavaGrammarParser.COLON)
            self.state = 1236
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParExpression" ):
                return visitor.visitParExpression(self)
            else:
                return visitor.visitChildren(self)




    def parExpression(self):

        localctx = JavaGrammarParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.match(JavaGrammarParser.LPAREN)
            self.state = 1239
            self.expression(0)
            self.state = 1240
            self.match(JavaGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = JavaGrammarParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.expression(0)
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 1243
                self.match(JavaGrammarParser.COMMA)
                self.state = 1244
                self.expression(0)
                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_methodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodCall" ):
                return visitor.visitMethodCall(self)
            else:
                return visitor.visitChildren(self)




    def methodCall(self):

        localctx = JavaGrammarParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_methodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.identifier()
            self.state = 1251
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TernaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,i)

        def COLON(self):
            return self.getToken(JavaGrammarParser.COLON, 0)
        def QUESTION(self):
            return self.getToken(JavaGrammarParser.QUESTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryExpression" ):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryExpression" ):
                listener.exitTernaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTernaryExpression" ):
                return visitor.visitTernaryExpression(self)
            else:
                return visitor.visitChildren(self)


    class InstanceOfOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)

        def INSTANCEOF(self):
            return self.getToken(JavaGrammarParser.INSTANCEOF, 0)
        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)

        def pattern(self):
            return self.getTypedRuleContext(JavaGrammarParser.PatternContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceOfOperatorExpression" ):
                listener.enterInstanceOfOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceOfOperatorExpression" ):
                listener.exitInstanceOfOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstanceOfOperatorExpression" ):
                return visitor.visitInstanceOfOperatorExpression(self)
            else:
                return visitor.visitChildren(self)


    class UnaryOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.prefix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)

        def ADD(self):
            return self.getToken(JavaGrammarParser.ADD, 0)
        def SUB(self):
            return self.getToken(JavaGrammarParser.SUB, 0)
        def INC(self):
            return self.getToken(JavaGrammarParser.INC, 0)
        def DEC(self):
            return self.getToken(JavaGrammarParser.DEC, 0)
        def TILDE(self):
            return self.getToken(JavaGrammarParser.TILDE, 0)
        def BANG(self):
            return self.getToken(JavaGrammarParser.BANG, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperatorExpression" ):
                listener.enterUnaryOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperatorExpression" ):
                listener.exitUnaryOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperatorExpression" ):
                return visitor.visitUnaryOperatorExpression(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(JavaGrammarParser.PrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)


    class ObjectCreationExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(JavaGrammarParser.NEW, 0)
        def creator(self):
            return self.getTypedRuleContext(JavaGrammarParser.CreatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCreationExpression" ):
                listener.enterObjectCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCreationExpression" ):
                listener.exitObjectCreationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectCreationExpression" ):
                return visitor.visitObjectCreationExpression(self)
            else:
                return visitor.visitChildren(self)


    class ExpressionLambdaContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lambdaExpression(self):
            return self.getTypedRuleContext(JavaGrammarParser.LambdaExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionLambda" ):
                listener.enterExpressionLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionLambda" ):
                listener.exitExpressionLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionLambda" ):
                return visitor.visitExpressionLambda(self)
            else:
                return visitor.visitChildren(self)


    class PostIncrementDecrementOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.postfix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)

        def INC(self):
            return self.getToken(JavaGrammarParser.INC, 0)
        def DEC(self):
            return self.getToken(JavaGrammarParser.DEC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostIncrementDecrementOperatorExpression" ):
                listener.enterPostIncrementDecrementOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostIncrementDecrementOperatorExpression" ):
                listener.exitPostIncrementDecrementOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostIncrementDecrementOperatorExpression" ):
                return visitor.visitPostIncrementDecrementOperatorExpression(self)
            else:
                return visitor.visitChildren(self)


    class MemberReferenceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(JavaGrammarParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)

        def methodCall(self):
            return self.getTypedRuleContext(JavaGrammarParser.MethodCallContext,0)

        def THIS(self):
            return self.getToken(JavaGrammarParser.THIS, 0)
        def NEW(self):
            return self.getToken(JavaGrammarParser.NEW, 0)
        def innerCreator(self):
            return self.getTypedRuleContext(JavaGrammarParser.InnerCreatorContext,0)

        def SUPER(self):
            return self.getToken(JavaGrammarParser.SUPER, 0)
        def superSuffix(self):
            return self.getTypedRuleContext(JavaGrammarParser.SuperSuffixContext,0)

        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExplicitGenericInvocationContext,0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.NonWildcardTypeArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberReferenceExpression" ):
                listener.enterMemberReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberReferenceExpression" ):
                listener.exitMemberReferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberReferenceExpression" ):
                return visitor.visitMemberReferenceExpression(self)
            else:
                return visitor.visitChildren(self)


    class ExpressionSwitchContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def switchExpression(self):
            return self.getTypedRuleContext(JavaGrammarParser.SwitchExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionSwitch" ):
                listener.enterExpressionSwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionSwitch" ):
                listener.exitExpressionSwitch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionSwitch" ):
                return visitor.visitExpressionSwitch(self)
            else:
                return visitor.visitChildren(self)


    class BinaryOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,i)

        def MUL(self):
            return self.getToken(JavaGrammarParser.MUL, 0)
        def DIV(self):
            return self.getToken(JavaGrammarParser.DIV, 0)
        def MOD(self):
            return self.getToken(JavaGrammarParser.MOD, 0)
        def ADD(self):
            return self.getToken(JavaGrammarParser.ADD, 0)
        def SUB(self):
            return self.getToken(JavaGrammarParser.SUB, 0)
        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.LT)
            else:
                return self.getToken(JavaGrammarParser.LT, i)
        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.GT)
            else:
                return self.getToken(JavaGrammarParser.GT, i)
        def LE(self):
            return self.getToken(JavaGrammarParser.LE, 0)
        def GE(self):
            return self.getToken(JavaGrammarParser.GE, 0)
        def EQUAL(self):
            return self.getToken(JavaGrammarParser.EQUAL, 0)
        def NOTEQUAL(self):
            return self.getToken(JavaGrammarParser.NOTEQUAL, 0)
        def BITAND(self):
            return self.getToken(JavaGrammarParser.BITAND, 0)
        def CARET(self):
            return self.getToken(JavaGrammarParser.CARET, 0)
        def BITOR(self):
            return self.getToken(JavaGrammarParser.BITOR, 0)
        def AND(self):
            return self.getToken(JavaGrammarParser.AND, 0)
        def OR(self):
            return self.getToken(JavaGrammarParser.OR, 0)
        def ASSIGN(self):
            return self.getToken(JavaGrammarParser.ASSIGN, 0)
        def ADD_ASSIGN(self):
            return self.getToken(JavaGrammarParser.ADD_ASSIGN, 0)
        def SUB_ASSIGN(self):
            return self.getToken(JavaGrammarParser.SUB_ASSIGN, 0)
        def MUL_ASSIGN(self):
            return self.getToken(JavaGrammarParser.MUL_ASSIGN, 0)
        def DIV_ASSIGN(self):
            return self.getToken(JavaGrammarParser.DIV_ASSIGN, 0)
        def AND_ASSIGN(self):
            return self.getToken(JavaGrammarParser.AND_ASSIGN, 0)
        def OR_ASSIGN(self):
            return self.getToken(JavaGrammarParser.OR_ASSIGN, 0)
        def XOR_ASSIGN(self):
            return self.getToken(JavaGrammarParser.XOR_ASSIGN, 0)
        def RSHIFT_ASSIGN(self):
            return self.getToken(JavaGrammarParser.RSHIFT_ASSIGN, 0)
        def URSHIFT_ASSIGN(self):
            return self.getToken(JavaGrammarParser.URSHIFT_ASSIGN, 0)
        def LSHIFT_ASSIGN(self):
            return self.getToken(JavaGrammarParser.LSHIFT_ASSIGN, 0)
        def MOD_ASSIGN(self):
            return self.getToken(JavaGrammarParser.MOD_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOperatorExpression" ):
                listener.enterBinaryOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOperatorExpression" ):
                listener.exitBinaryOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOperatorExpression" ):
                return visitor.visitBinaryOperatorExpression(self)
            else:
                return visitor.visitChildren(self)


    class MethodCallExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def methodCall(self):
            return self.getTypedRuleContext(JavaGrammarParser.MethodCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCallExpression" ):
                listener.enterMethodCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCallExpression" ):
                listener.exitMethodCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodCallExpression" ):
                return visitor.visitMethodCallExpression(self)
            else:
                return visitor.visitChildren(self)


    class MethodReferenceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)

        def COLONCOLON(self):
            return self.getToken(JavaGrammarParser.COLONCOLON, 0)
        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)

        def NEW(self):
            return self.getToken(JavaGrammarParser.NEW, 0)
        def typeArguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeArgumentsContext,0)

        def classType(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassTypeContext,0)

        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodReferenceExpression" ):
                listener.enterMethodReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodReferenceExpression" ):
                listener.exitMethodReferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodReferenceExpression" ):
                return visitor.visitMethodReferenceExpression(self)
            else:
                return visitor.visitChildren(self)


    class SquareBracketExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,i)

        def LBRACK(self):
            return self.getToken(JavaGrammarParser.LBRACK, 0)
        def RBRACK(self):
            return self.getToken(JavaGrammarParser.RBRACK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSquareBracketExpression" ):
                listener.enterSquareBracketExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSquareBracketExpression" ):
                listener.exitSquareBracketExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSquareBracketExpression" ):
                return visitor.visitSquareBracketExpression(self)
            else:
                return visitor.visitChildren(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaGrammarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)
        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,i)

        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,i)

        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.BITAND)
            else:
                return self.getToken(JavaGrammarParser.BITAND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaGrammarParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 196
        self.enterRecursionRule(localctx, 196, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                localctx = JavaGrammarParser.PrimaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1254
                self.primary()
                pass

            elif la_ == 2:
                localctx = JavaGrammarParser.MethodCallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1255
                self.methodCall()
                pass

            elif la_ == 3:
                localctx = JavaGrammarParser.MethodReferenceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1256
                self.typeType()
                self.state = 1257
                self.match(JavaGrammarParser.COLONCOLON)
                self.state = 1263
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 92, 131]:
                    self.state = 1259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==92:
                        self.state = 1258
                        self.typeArguments()


                    self.state = 1261
                    self.identifier()
                    pass
                elif token in [33]:
                    self.state = 1262
                    self.match(JavaGrammarParser.NEW)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = JavaGrammarParser.MethodReferenceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1265
                self.classType()
                self.state = 1266
                self.match(JavaGrammarParser.COLONCOLON)
                self.state = 1268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1267
                    self.typeArguments()


                self.state = 1270
                self.match(JavaGrammarParser.NEW)
                pass

            elif la_ == 5:
                localctx = JavaGrammarParser.ExpressionSwitchContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1272
                self.switchExpression()
                pass

            elif la_ == 6:
                localctx = JavaGrammarParser.UnaryOperatorExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1273
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 15363) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1274
                self.expression(17)
                pass

            elif la_ == 7:
                localctx = JavaGrammarParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1275
                self.match(JavaGrammarParser.LPAREN)
                self.state = 1279
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1276
                        self.annotation() 
                    self.state = 1281
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

                self.state = 1282
                self.typeType()
                self.state = 1287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==109:
                    self.state = 1283
                    self.match(JavaGrammarParser.BITAND)
                    self.state = 1284
                    self.typeType()
                    self.state = 1289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1290
                self.match(JavaGrammarParser.RPAREN)
                self.state = 1291
                self.expression(16)
                pass

            elif la_ == 8:
                localctx = JavaGrammarParser.ObjectCreationExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1293
                self.match(JavaGrammarParser.NEW)
                self.state = 1294
                self.creator()
                pass

            elif la_ == 9:
                localctx = JavaGrammarParser.ExpressionLambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1295
                self.lambdaExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1381
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1379
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                    if la_ == 1:
                        localctx = JavaGrammarParser.BinaryOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1298
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1299
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 35) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1300
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = JavaGrammarParser.BinaryOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1301
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1302
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==105 or _la==106):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1303
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = JavaGrammarParser.BinaryOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1304
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1312
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                        if la_ == 1:
                            self.state = 1305
                            self.match(JavaGrammarParser.LT)
                            self.state = 1306
                            self.match(JavaGrammarParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1307
                            self.match(JavaGrammarParser.GT)
                            self.state = 1308
                            self.match(JavaGrammarParser.GT)
                            self.state = 1309
                            self.match(JavaGrammarParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1310
                            self.match(JavaGrammarParser.GT)
                            self.state = 1311
                            self.match(JavaGrammarParser.GT)
                            pass


                        self.state = 1314
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = JavaGrammarParser.BinaryOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1315
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1316
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 387) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1317
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = JavaGrammarParser.BinaryOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1318
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1319
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==97 or _la==100):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1320
                        self.expression(10)
                        pass

                    elif la_ == 6:
                        localctx = JavaGrammarParser.BinaryOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1321
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1322
                        localctx.bop = self.match(JavaGrammarParser.BITAND)
                        self.state = 1323
                        self.expression(9)
                        pass

                    elif la_ == 7:
                        localctx = JavaGrammarParser.BinaryOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1324
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1325
                        localctx.bop = self.match(JavaGrammarParser.CARET)
                        self.state = 1326
                        self.expression(8)
                        pass

                    elif la_ == 8:
                        localctx = JavaGrammarParser.BinaryOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1327
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1328
                        localctx.bop = self.match(JavaGrammarParser.BITOR)
                        self.state = 1329
                        self.expression(7)
                        pass

                    elif la_ == 9:
                        localctx = JavaGrammarParser.BinaryOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1330
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1331
                        localctx.bop = self.match(JavaGrammarParser.AND)
                        self.state = 1332
                        self.expression(6)
                        pass

                    elif la_ == 10:
                        localctx = JavaGrammarParser.BinaryOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1333
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1334
                        localctx.bop = self.match(JavaGrammarParser.OR)
                        self.state = 1335
                        self.expression(5)
                        pass

                    elif la_ == 11:
                        localctx = JavaGrammarParser.TernaryExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1336
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1337
                        localctx.bop = self.match(JavaGrammarParser.QUESTION)
                        self.state = 1338
                        self.expression(0)
                        self.state = 1339
                        self.match(JavaGrammarParser.COLON)
                        self.state = 1340
                        self.expression(3)
                        pass

                    elif la_ == 12:
                        localctx = JavaGrammarParser.BinaryOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1342
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1343
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 17171480577) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1344
                        self.expression(2)
                        pass

                    elif la_ == 13:
                        localctx = JavaGrammarParser.SquareBracketExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1345
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1346
                        self.match(JavaGrammarParser.LBRACK)
                        self.state = 1347
                        self.expression(0)
                        self.state = 1348
                        self.match(JavaGrammarParser.RBRACK)
                        pass

                    elif la_ == 14:
                        localctx = JavaGrammarParser.MemberReferenceExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1350
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1351
                        localctx.bop = self.match(JavaGrammarParser.DOT)
                        self.state = 1363
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                        if la_ == 1:
                            self.state = 1352
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1353
                            self.methodCall()
                            pass

                        elif la_ == 3:
                            self.state = 1354
                            self.match(JavaGrammarParser.THIS)
                            pass

                        elif la_ == 4:
                            self.state = 1355
                            self.match(JavaGrammarParser.NEW)
                            self.state = 1357
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==92:
                                self.state = 1356
                                self.nonWildcardTypeArguments()


                            self.state = 1359
                            self.innerCreator()
                            pass

                        elif la_ == 5:
                            self.state = 1360
                            self.match(JavaGrammarParser.SUPER)
                            self.state = 1361
                            self.superSuffix()
                            pass

                        elif la_ == 6:
                            self.state = 1362
                            self.explicitGenericInvocation()
                            pass


                        pass

                    elif la_ == 15:
                        localctx = JavaGrammarParser.MethodReferenceExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1365
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1366
                        self.match(JavaGrammarParser.COLONCOLON)
                        self.state = 1368
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==92:
                            self.state = 1367
                            self.typeArguments()


                        self.state = 1370
                        self.identifier()
                        pass

                    elif la_ == 16:
                        localctx = JavaGrammarParser.PostIncrementDecrementOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1371
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1372
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==103 or _la==104):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 17:
                        localctx = JavaGrammarParser.InstanceOfOperatorExpressionContext(self, JavaGrammarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1373
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1374
                        localctx.bop = self.match(JavaGrammarParser.INSTANCEOF)
                        self.state = 1377
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                        if la_ == 1:
                            self.state = 1375
                            self.typeType()
                            pass

                        elif la_ == 2:
                            self.state = 1376
                            self.pattern()
                            pass


                        pass

             
                self.state = 1383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = JavaGrammarParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1384
                    self.variableModifier() 
                self.state = 1389
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

            self.state = 1390
            self.typeType()
            self.state = 1394
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1391
                    self.annotation() 
                self.state = 1396
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

            self.state = 1397
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JavaGrammarParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(JavaGrammarParser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JavaGrammarParser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaExpression" ):
                return visitor.visitLambdaExpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaExpression(self):

        localctx = JavaGrammarParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self.lambdaParameters()
            self.state = 1400
            self.match(JavaGrammarParser.ARROW)
            self.state = 1401
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,i)


        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaGrammarParser.FormalParameterListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def lambdaLVTIList(self):
            return self.getTypedRuleContext(JavaGrammarParser.LambdaLVTIListContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters" ):
                return visitor.visitLambdaParameters(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameters(self):

        localctx = JavaGrammarParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 1425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1403
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1404
                self.match(JavaGrammarParser.LPAREN)
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -288511833864501211) != 0) or _la==126 or _la==131:
                    self.state = 1405
                    self.formalParameterList()


                self.state = 1408
                self.match(JavaGrammarParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1409
                self.match(JavaGrammarParser.LPAREN)
                self.state = 1410
                self.identifier()
                self.state = 1415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==88:
                    self.state = 1411
                    self.match(JavaGrammarParser.COMMA)
                    self.state = 1412
                    self.identifier()
                    self.state = 1417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1418
                self.match(JavaGrammarParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1420
                self.match(JavaGrammarParser.LPAREN)
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 554145270464513) != 0) or _la==126 or _la==131:
                    self.state = 1421
                    self.lambdaLVTIList()


                self.state = 1424
                self.match(JavaGrammarParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaGrammarParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaBody" ):
                return visitor.visitLambdaBody(self)
            else:
                return visitor.visitChildren(self)




    def lambdaBody(self):

        localctx = JavaGrammarParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_lambdaBody)
        try:
            self.state = 1429
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 16, 22, 29, 31, 33, 39, 42, 43, 45, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 94, 103, 104, 105, 106, 126, 131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1427
                self.expression(0)
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1428
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def THIS(self):
            return self.getToken(JavaGrammarParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaGrammarParser.SUPER, 0)

        def literal(self):
            return self.getTypedRuleContext(JavaGrammarParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeOrVoidContext,0)


        def DOT(self):
            return self.getToken(JavaGrammarParser.DOT, 0)

        def CLASS(self):
            return self.getToken(JavaGrammarParser.CLASS, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExplicitGenericInvocationSuffixContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = JavaGrammarParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_primary)
        try:
            self.state = 1449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1431
                self.match(JavaGrammarParser.LPAREN)
                self.state = 1432
                self.expression(0)
                self.state = 1433
                self.match(JavaGrammarParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1435
                self.match(JavaGrammarParser.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1436
                self.match(JavaGrammarParser.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1437
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1438
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1439
                self.typeTypeOrVoid()
                self.state = 1440
                self.match(JavaGrammarParser.DOT)
                self.state = 1441
                self.match(JavaGrammarParser.CLASS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1443
                self.nonWildcardTypeArguments()
                self.state = 1447
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [42, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 131]:
                    self.state = 1444
                    self.explicitGenericInvocationSuffix()
                    pass
                elif token in [45]:
                    self.state = 1445
                    self.match(JavaGrammarParser.THIS)
                    self.state = 1446
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JavaGrammarParser.SWITCH, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaGrammarParser.ParExpressionContext,0)


        def LBRACE(self):
            return self.getToken(JavaGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaGrammarParser.RBRACE, 0)

        def switchLabeledRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.SwitchLabeledRuleContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.SwitchLabeledRuleContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_switchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchExpression" ):
                listener.enterSwitchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchExpression" ):
                listener.exitSwitchExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchExpression" ):
                return visitor.visitSwitchExpression(self)
            else:
                return visitor.visitChildren(self)




    def switchExpression(self):

        localctx = JavaGrammarParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_switchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(JavaGrammarParser.SWITCH)
            self.state = 1452
            self.parExpression()
            self.state = 1453
            self.match(JavaGrammarParser.LBRACE)
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8 or _la==14:
                self.state = 1454
                self.switchLabeledRule()
                self.state = 1459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1460
            self.match(JavaGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabeledRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JavaGrammarParser.CASE, 0)

        def switchRuleOutcome(self):
            return self.getTypedRuleContext(JavaGrammarParser.SwitchRuleOutcomeContext,0)


        def ARROW(self):
            return self.getToken(JavaGrammarParser.ARROW, 0)

        def COLON(self):
            return self.getToken(JavaGrammarParser.COLON, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionListContext,0)


        def NULL_LITERAL(self):
            return self.getToken(JavaGrammarParser.NULL_LITERAL, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaGrammarParser.GuardedPatternContext,0)


        def DEFAULT(self):
            return self.getToken(JavaGrammarParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_switchLabeledRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabeledRule" ):
                listener.enterSwitchLabeledRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabeledRule" ):
                listener.exitSwitchLabeledRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabeledRule" ):
                return visitor.visitSwitchLabeledRule(self)
            else:
                return visitor.visitChildren(self)




    def switchLabeledRule(self):

        localctx = JavaGrammarParser.SwitchLabeledRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_switchLabeledRule)
        self._la = 0 # Token type
        try:
            self.state = 1473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.match(JavaGrammarParser.CASE)
                self.state = 1466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1463
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 1464
                    self.match(JavaGrammarParser.NULL_LITERAL)
                    pass

                elif la_ == 3:
                    self.state = 1465
                    self.guardedPattern(0)
                    pass


                self.state = 1468
                _la = self._input.LA(1)
                if not(_la==96 or _la==124):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1469
                self.switchRuleOutcome()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1470
                self.match(JavaGrammarParser.DEFAULT)
                self.state = 1471
                _la = self._input.LA(1)
                if not(_la==96 or _la==124):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1472
                self.switchRuleOutcome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardedPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaGrammarParser.GuardedPatternContext,0)


        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.AND)
            else:
                return self.getToken(JavaGrammarParser.AND, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_guardedPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuardedPattern" ):
                listener.enterGuardedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuardedPattern" ):
                listener.exitGuardedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuardedPattern" ):
                return visitor.visitGuardedPattern(self)
            else:
                return visitor.visitChildren(self)



    def guardedPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaGrammarParser.GuardedPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_guardedPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81]:
                self.state = 1476
                self.match(JavaGrammarParser.LPAREN)
                self.state = 1477
                self.guardedPattern(0)
                self.state = 1478
                self.match(JavaGrammarParser.RPAREN)
                pass
            elif token in [5, 7, 10, 16, 20, 22, 29, 31, 39, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 126, 131]:
                self.state = 1483
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1480
                        self.variableModifier() 
                    self.state = 1485
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

                self.state = 1486
                self.typeType()
                self.state = 1490
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1487
                        self.annotation() 
                    self.state = 1492
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

                self.state = 1493
                self.identifier()
                self.state = 1498
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1494
                        self.match(JavaGrammarParser.AND)
                        self.state = 1495
                        self.expression(0) 
                    self.state = 1500
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1508
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaGrammarParser.GuardedPatternContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_guardedPattern)
                    self.state = 1503
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1504
                    self.match(JavaGrammarParser.AND)
                    self.state = 1505
                    self.expression(0) 
                self.state = 1510
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SwitchRuleOutcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaGrammarParser.BlockContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_switchRuleOutcome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchRuleOutcome" ):
                listener.enterSwitchRuleOutcome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchRuleOutcome" ):
                listener.exitSwitchRuleOutcome(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchRuleOutcome" ):
                return visitor.visitSwitchRuleOutcome(self)
            else:
                return visitor.visitChildren(self)




    def switchRuleOutcome(self):

        localctx = JavaGrammarParser.SwitchRuleOutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_switchRuleOutcome)
        self._la = 0 # Token type
        try:
            self.state = 1518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1511
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2676233283195656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611694266652819423) != 0) or _la==131:
                    self.state = 1512
                    self.blockStatement()
                    self.state = 1517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassOrInterfaceTypeContext,0)


        def DOT(self):
            return self.getToken(JavaGrammarParser.DOT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_classType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType" ):
                listener.enterClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType" ):
                listener.exitClassType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassType" ):
                return visitor.visitClassType(self)
            else:
                return visitor.visitChildren(self)




    def classType(self):

        localctx = JavaGrammarParser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_classType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1520
                self.classOrInterfaceType()
                self.state = 1521
                self.match(JavaGrammarParser.DOT)


            self.state = 1528
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1525
                    self.annotation() 
                self.state = 1530
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

            self.state = 1531
            self.identifier()
            self.state = 1533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1532
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreator" ):
                return visitor.visitCreator(self)
            else:
                return visitor.visitChildren(self)




    def creator(self):

        localctx = JavaGrammarParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_creator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.identifier()
            self.state = 1536
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(JavaGrammarParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_createdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName" ):
                listener.enterCreatedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName" ):
                listener.exitCreatedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreatedName" ):
                return visitor.visitCreatedName(self)
            else:
                return visitor.visitChildren(self)




    def createdName(self):

        localctx = JavaGrammarParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_createdName)
        try:
            self.state = 1540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1538
                self.identifier()
                pass
            elif token in [5, 7, 10, 16, 22, 29, 31, 39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1539
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerCreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(JavaGrammarParser.NonWildcardTypeArgumentsOrDiamondContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_innerCreator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerCreator" ):
                listener.enterInnerCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerCreator" ):
                listener.exitInnerCreator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerCreator" ):
                return visitor.visitInnerCreator(self)
            else:
                return visitor.visitChildren(self)




    def innerCreator(self):

        localctx = JavaGrammarParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_innerCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.identifier()
            self.state = 1544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1543
                self.nonWildcardTypeArgumentsOrDiamond()


            self.state = 1546
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaGrammarParser.ArrayInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.LBRACK)
            else:
                return self.getToken(JavaGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.RBRACK)
            else:
                return self.getToken(JavaGrammarParser.RBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayCreatorRest" ):
                return visitor.visitArrayCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def arrayCreatorRest(self):

        localctx = JavaGrammarParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.state = 1570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1550 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1548
                    self.match(JavaGrammarParser.LBRACK)
                    self.state = 1549
                    self.match(JavaGrammarParser.RBRACK)
                    self.state = 1552 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==85):
                        break

                self.state = 1554
                self.arrayInitializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1559 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1555
                        self.match(JavaGrammarParser.LBRACK)
                        self.state = 1556
                        self.expression(0)
                        self.state = 1557
                        self.match(JavaGrammarParser.RBRACK)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1561 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                self.state = 1567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==85:
                    self.state = 1563
                    self.match(JavaGrammarParser.LBRACK)
                    self.state = 1564
                    self.match(JavaGrammarParser.RBRACK)
                    self.state = 1569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassCreatorRest" ):
                return visitor.visitClassCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def classCreatorRest(self):

        localctx = JavaGrammarParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self.arguments()
            self.state = 1574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1573
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExplicitGenericInvocationSuffixContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_explicitGenericInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocation" ):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocation" ):
                listener.exitExplicitGenericInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitGenericInvocation" ):
                return visitor.visitExplicitGenericInvocation(self)
            else:
                return visitor.visitChildren(self)




    def explicitGenericInvocation(self):

        localctx = JavaGrammarParser.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.nonWildcardTypeArguments()
            self.state = 1577
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaGrammarParser.LT, 0)

        def GT(self):
            return self.getToken(JavaGrammarParser.GT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgumentsOrDiamond" ):
                return visitor.visitTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)




    def typeArgumentsOrDiamond(self):

        localctx = JavaGrammarParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1579
                self.match(JavaGrammarParser.LT)
                self.state = 1580
                self.match(JavaGrammarParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1581
                self.typeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaGrammarParser.LT, 0)

        def GT(self):
            return self.getToken(JavaGrammarParser.GT, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.NonWildcardTypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_nonWildcardTypeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArgumentsOrDiamond" ):
                listener.enterNonWildcardTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArgumentsOrDiamond" ):
                listener.exitNonWildcardTypeArgumentsOrDiamond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonWildcardTypeArgumentsOrDiamond" ):
                return visitor.visitNonWildcardTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)




    def nonWildcardTypeArgumentsOrDiamond(self):

        localctx = JavaGrammarParser.NonWildcardTypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1584
                self.match(JavaGrammarParser.LT)
                self.state = 1585
                self.match(JavaGrammarParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1586
                self.nonWildcardTypeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaGrammarParser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeListContext,0)


        def GT(self):
            return self.getToken(JavaGrammarParser.GT, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_nonWildcardTypeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArguments" ):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArguments" ):
                listener.exitNonWildcardTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonWildcardTypeArguments" ):
                return visitor.visitNonWildcardTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def nonWildcardTypeArguments(self):

        localctx = JavaGrammarParser.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.match(JavaGrammarParser.LT)
            self.state = 1590
            self.typeList()
            self.state = 1591
            self.match(JavaGrammarParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.TypeTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeList" ):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def typeList(self):

        localctx = JavaGrammarParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            self.typeType()
            self.state = 1598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 1594
                self.match(JavaGrammarParser.COMMA)
                self.state = 1595
                self.typeType()
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaGrammarParser.ClassOrInterfaceTypeContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(JavaGrammarParser.PrimitiveTypeContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.LBRACK)
            else:
                return self.getToken(JavaGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.RBRACK)
            else:
                return self.getToken(JavaGrammarParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_typeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeType" ):
                listener.enterTypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeType" ):
                listener.exitTypeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeType" ):
                return visitor.visitTypeType(self)
            else:
                return visitor.visitChildren(self)




    def typeType(self):

        localctx = JavaGrammarParser.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_typeType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 131]:
                self.state = 1601
                self.classOrInterfaceType()
                pass
            elif token in [5, 7, 10, 16, 22, 29, 31, 39]:
                self.state = 1602
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1609
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1605
                    self.match(JavaGrammarParser.LBRACK)
                    self.state = 1606
                    self.match(JavaGrammarParser.RBRACK) 
                self.state = 1611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JavaGrammarParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JavaGrammarParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JavaGrammarParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaGrammarParser.SHORT, 0)

        def INT(self):
            return self.getToken(JavaGrammarParser.INT, 0)

        def LONG(self):
            return self.getToken(JavaGrammarParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JavaGrammarParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JavaGrammarParser.DOUBLE, 0)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveType" ):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)




    def primitiveType(self):

        localctx = JavaGrammarParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 552444429472) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaGrammarParser.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaGrammarParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JavaGrammarParser.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(JavaGrammarParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaGrammarParser.COMMA)
            else:
                return self.getToken(JavaGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JavaGrammarParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = JavaGrammarParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1614
            self.match(JavaGrammarParser.LT)
            self.state = 1615
            self.typeArgument()
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 1616
                self.match(JavaGrammarParser.COMMA)
                self.state = 1617
                self.typeArgument()
                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1623
            self.match(JavaGrammarParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.ArgumentsContext,0)


        def DOT(self):
            return self.getToken(JavaGrammarParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_superSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperSuffix" ):
                listener.enterSuperSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperSuffix" ):
                listener.exitSuperSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperSuffix" ):
                return visitor.visitSuperSuffix(self)
            else:
                return visitor.visitChildren(self)




    def superSuffix(self):

        localctx = JavaGrammarParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_superSuffix)
        self._la = 0 # Token type
        try:
            self.state = 1634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1625
                self.arguments()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1626
                self.match(JavaGrammarParser.DOT)
                self.state = 1628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1627
                    self.typeArguments()


                self.state = 1630
                self.identifier()
                self.state = 1632
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1631
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(JavaGrammarParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaGrammarParser.SuperSuffixContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaGrammarParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaGrammarParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_explicitGenericInvocationSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocationSuffix" ):
                listener.enterExplicitGenericInvocationSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocationSuffix" ):
                listener.exitExplicitGenericInvocationSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitGenericInvocationSuffix" ):
                return visitor.visitExplicitGenericInvocationSuffix(self)
            else:
                return visitor.visitChildren(self)




    def explicitGenericInvocationSuffix(self):

        localctx = JavaGrammarParser.ExplicitGenericInvocationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1636
                self.match(JavaGrammarParser.SUPER)
                self.state = 1637
                self.superSuffix()
                pass
            elif token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1638
                self.identifier()
                self.state = 1639
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaGrammarParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaGrammarParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaGrammarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = JavaGrammarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1643
            self.match(JavaGrammarParser.LPAREN)
            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -288475137395521499) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 2377900732130004991) != 0):
                self.state = 1644
                self.expressionList()


            self.state = 1647
            self.match(JavaGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[98] = self.expression_sempred
        self._predicates[106] = self.guardedPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 10)
         

    def guardedPattern_sempred(self, localctx:GuardedPatternContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         




